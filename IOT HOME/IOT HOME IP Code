#include <Wire.h>
#include <Adafruit_SHT31.h>    
#include <U8g2lib.h>   // Changed from Adafruit_SH110X to U8g2
#include <Arduino.h>
#include <WiFi.h>              
#include <AsyncTCP.h>          
#include <ESPAsyncWebServer.h>

/****************** I2C Addresses *****************/
#define RAINFALL_SENSOR_ADDRESS 0x08
#define FLAME_SENSOR_ADDRESS    0x21
#define RELAY_ADDRESS           0x22
#define AIR_QUALITY_ADDRESS     0x23  // MQ3 Gas Sensor ATtiny address
#define MOTION_SENSOR_ADDRESS   0x24
#define EARTHQUAKE_SENSOR_ADDRESS 0x25
#define COMMAND_REQUEST_DATA    2

#define OLED_I2C_ADDRESS 0x3C
#define RAINFALL_COMMAND 0x08

// U8G2 Constructor - SH1106 128x64 I2C
U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);
Adafruit_SHT31   sht31   = Adafruit_SHT31(); 

bool relayState = false; 

#define BTN_UP     18
#define BTN_DOWN   16
#define BTN_LEFT   17
#define BTN_RIGHT  4
#define BTN_CENTER 5

int currentScreen     = 0; 
const int totalScreens = 10;

#define TOUCH_PIN1  32
#define TOUCH_PIN2  33
#define TOUCH_PIN3  14
#define TOUCH_PIN4  12
#define BUZZER_PIN  19

int threshold = 30;  
int touch1, touch2, touch3, touch4;

/****************** IoT Mode **********************/
#define AP_SSID       "HOME"
#define AP_PASSWORD   "12345678"
bool iotModeActive = false;

AsyncWebServer server(80);

/****************** Function Prototypes ***********/
void configureBuzzer();
void playTone(int frequency);
void stopTone();
void handleNavigation();
void updateDisplay();       
void updateDetailView();   
void updateRelayControlView();
void updateFlameView();
void updateAirQualityView();
void updateMotionView();
void updateEarthquakeView();
void updateMusicModeView();
void updateIoTModeScreen();
void showProfessionalBootScreen();
void drawProgressBar(int x, int y, int width, int height, int percentage);
void drawStatusIndicator(int x, int y, bool state);
void drawIcon(int x, int y, const char* icon);
String getRainfallStatus();
String readFlameStatus();
String readAirQualityStatus();
String readMotionStatus();
String readEarthquakeStatus();
uint16_t readMQ3Value();  // Updated function prototype
void drawGasBar(uint16_t val);  // Added new function prototype
void controlRelay(bool state);
void setupWiFiAP();
void stopWiFiAP();
String buildJSONData();

/*************************************************
 *        Professional Dashboard HTML
 *************************************************/
const char dashboard_html[] PROGMEM = R"====(
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HOME Monitoring Dashboard</title>
    <style>
        :root {
            --primary-color: #F39C12;
            --secondary-color: #E67E22;
            --accent-color: #F1C40F;
            --danger-color: #E74C3C;
            --success-color: #27AE60;
            --warning-color: #FF6B35;
            --dark-color: #2C3E50;
            --light-color: #FFF8DC;
            --text-color: #2C3E50;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
        }

        body {
            background: linear-gradient(135deg, #FFF3CD, #FFF8DC, #FFFACD);
            color: var(--text-color);
            line-height: 1.6;
            min-height: 100vh;
        }

        .header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 20px;
            text-align: center;
            box-shadow: 0 4px 20px rgba(243, 156, 18, 0.3);
        }

        .header h1 {
            font-size: clamp(1.8rem, 4vw, 3rem);
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header .subtitle {
            font-size: clamp(1rem, 2vw, 1.2rem);
            opacity: 0.95;
        }

        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 15px;
        }

        .system-status {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 25px;
        }

        .status-card {
            background: linear-gradient(145deg, white, var(--light-color));
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(243, 156, 18, 0.15);
            border: 2px solid var(--accent-color);
            transition: transform 0.3s ease;
        }

        .status-card:hover {
            transform: translateY(-3px);
        }

        .status-value {
            font-size: clamp(1.4rem, 3vw, 1.8rem);
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 8px;
        }

        .status-label {
            font-size: clamp(0.9rem, 2vw, 1rem);
            color: var(--dark-color);
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin-bottom: 25px;
        }

        .card {
            background: linear-gradient(145deg, white, var(--light-color));
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 6px 25px rgba(243, 156, 18, 0.15);
            border: 2px solid var(--accent-color);
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(243, 156, 18, 0.2);
        }

        .card-title {
            font-size: clamp(1.3rem, 3vw, 1.5rem);
            font-weight: 700;
            margin-bottom: 20px;
            color: var(--primary-color);
            text-align: center;
            text-transform: uppercase;
            letter-spacing: 1px;
            border-bottom: 3px solid var(--accent-color);
            padding-bottom: 10px;
        }

        .control-section {
            text-align: center;
        }

        .control-btn {
            background: linear-gradient(145deg, var(--primary-color), var(--secondary-color));
            color: white;
            border: none;
            padding: 18px 30px;
            border-radius: 25px;
            font-size: clamp(1rem, 2.5vw, 1.2rem);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .control-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(243, 156, 18, 0.4);
        }

        .control-btn.active {
            background: linear-gradient(145deg, var(--success-color), #229954);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { box-shadow: 0 0 0 0 rgba(39, 174, 96, 0.7); }
            70% { box-shadow: 0 0 0 10px rgba(39, 174, 96, 0); }
            100% { box-shadow: 0 0 0 0 rgba(39, 174, 96, 0); }
        }

        .sensor-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .sensor-item {
            background: linear-gradient(145deg, #FFFEF7, #FFF8DC);
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            border: 2px solid var(--accent-color);
            transition: all 0.3s ease;
            box-shadow: 0 3px 10px rgba(243, 156, 18, 0.1);
            min-height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .sensor-item:hover {
            transform: scale(1.02);
            box-shadow: 0 5px 15px rgba(243, 156, 18, 0.2);
        }

        .sensor-label {
            font-size: clamp(0.9rem, 2vw, 1rem);
            font-weight: 600;
            color: var(--dark-color);
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 15px;
        }

        .sensor-value {
            font-size: clamp(1.6rem, 4vw, 2rem);
            font-weight: 700;
            color: var(--primary-color);
            margin: 15px 0;
        }

        .gauge-container {
            position: relative;
            width: 120px;
            height: 120px;
            margin: 15px auto;
        }

        .gauge-circle {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: conic-gradient(
                from 0deg,
                var(--success-color) 0%,
                var(--accent-color) 25%,
                var(--warning-color) 50%,
                var(--danger-color) 75%,
                var(--primary-color) 100%
            );
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .gauge-circle::before {
            content: '';
            position: absolute;
            width: 90px;
            height: 90px;
            background: white;
            border-radius: 50%;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.1);
        }

        .gauge-text {
            position: absolute;
            font-size: clamp(1rem, 3vw, 1.3rem);
            font-weight: 700;
            color: var(--primary-color);
            z-index: 10;
        }

        .status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 10px;
        }

        .status-on { 
            background-color: var(--success-color);
            animation: blink 1s infinite;
        }
        .status-off { 
            background-color: #95A5A6; 
        }

        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0.6; }
        }

        .alert {
            background: linear-gradient(145deg, var(--danger-color), #C0392B) !important;
            color: white !important;
            animation: alertPulse 1s infinite;
        }

        .safe {
            background: linear-gradient(145deg, var(--success-color), #229954) !important;
            color: white !important;
        }

        .warning {
            background: linear-gradient(145deg, var(--warning-color), #E74C3C) !important;
            color: white !important;
        }

        @keyframes alertPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .footer {
            background: linear-gradient(135deg, var(--dark-color), #34495E);
            color: white;
            text-align: center;
            padding: 25px;
            margin-top: 30px;
        }

        .footer h3 {
            font-size: clamp(1.2rem, 3vw, 1.5rem);
            margin-bottom: 8px;
        }

        .footer p {
            font-size: clamp(0.9rem, 2vw, 1rem);
        }

        .error-message {
            background: var(--danger-color);
            color: white;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            text-align: center;
        }

        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        /* Mobile Responsiveness */
        @media (max-width: 768px) {
            .container {
                padding: 0 10px;
            }
            
            .dashboard-grid {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .sensor-grid {
                grid-template-columns: 1fr;
                gap: 15px;
            }
            
            .system-status {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .gauge-container {
                width: 100px;
                height: 100px;
            }
            
            .gauge-circle::before {
                width: 75px;
                height: 75px;
            }
        }

        @media (max-width: 480px) {
            .system-status {
                grid-template-columns: 1fr;
            }
            
            .header {
                padding: 15px;
            }
            
            .card {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🏠 HOME Dashboard</h1>
        <div class="subtitle">Environmental Monitoring & Safety Control</div>
    </div>
    
    <div class="container">
        <div class="system-status">
            <div class="status-card">
                <div class="status-value" id="systemTime">--:--:--</div>
                <div class="status-label">System Time</div>
            </div>
            <div class="status-card">
                <div class="status-value" id="connectionStatus">Connecting...</div>
                <div class="status-label">Connection</div>
            </div>
            <div class="status-card">
                <div class="status-value" id="lastUpdate">Never</div>
                <div class="status-label">Last Update</div>
            </div>
            <div class="status-card">
                <div class="status-value" id="deviceCount">0</div>
                <div class="status-label">Updates Count</div>
            </div>
        </div>

        <div id="errorMessage" class="error-message" style="display: none;"></div>

        <div class="dashboard-grid">
            <div class="card">
                <h2 class="card-title">System Controls</h2>
                <div class="control-section">
                    <button class="control-btn" id="relayBtn" onclick="toggleRelay()">
                        <span class="status-indicator status-off"></span>
                        Relay: OFF
                    </button>
                </div>
            </div>
            
            <div class="card">
                <h2 class="card-title">Environmental Sensors</h2>
                <div class="sensor-grid">
                    <div class="sensor-item">
                        <div class="sensor-label">Temperature</div>
                        <div class="gauge-container">
                            <div class="gauge-circle">
                                <div class="gauge-text" id="tempGauge">--°C</div>
                            </div>
                        </div>
                    </div>
                    <div class="sensor-item">
                        <div class="sensor-label">Humidity</div>
                        <div class="gauge-container">
                            <div class="gauge-circle">
                                <div class="gauge-text" id="humGauge">--%</div>
                            </div>
                        </div>
                    </div>
                    <div class="sensor-item">
                        <div class="sensor-label">Rainfall</div>
                        <div class="sensor-value" id="rainValue">--</div>
                    </div>
                    <div class="sensor-item">
                        <div class="sensor-label">Gas Sensor</div>
                        <div class="gauge-container">
                            <div class="gauge-circle">
                                <div class="gauge-text" id="airGauge">--</div>
                            </div>
                        </div>
                        <div style="font-size: 0.9em; margin-top: 5px;" id="airStatus">--</div>
                    </div>
                </div>
            </div>

            <div class="card">
                <h2 class="card-title">Safety Sensors</h2>
                <div class="sensor-grid">
                    <div class="sensor-item" id="flameCard">
                        <div class="sensor-label">Flame Detection</div>
                        <div class="sensor-value" id="flameValue">--</div>
                    </div>
                    <div class="sensor-item" id="motionCard">
                        <div class="sensor-label">Motion Detection</div>
                        <div class="sensor-value" id="motionValue">--</div>
                    </div>
                    <div class="sensor-item" id="earthquakeCard">
                        <div class="sensor-label">Earthquake Detection</div>
                        <div class="sensor-value" id="earthquakeValue">--</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="footer">
        <h3>HOME Environmental Monitoring System</h3>
        <p>Advanced Safety & Control &copy; 2024</p>
    </div>

    <script>
        let isConnected = false;
        let updateCount = 0;
        let retryCount = 0;
        const maxRetries = 5;

        function showError(message) {
            const errorDiv = document.getElementById('errorMessage');
            errorDiv.textContent = message;
            errorDiv.style.display = 'block';
            setTimeout(() => {
                errorDiv.style.display = 'none';
            }, 5000);
        }

        function updateTime() {
            const now = new Date();
            document.getElementById('systemTime').textContent = now.toLocaleTimeString();
        }

        function toggleRelay() {
            const btn = document.getElementById("relayBtn");
            btn.classList.add('loading');
            
            fetch('/toggleRelay')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    btn.classList.remove('loading');
                    console.log('Relay response:', data);
                    
                    if (data.relay == 1 || data.relay === true || data.relay === "true") {
                        btn.innerHTML = '<span class="status-indicator status-on"></span>Relay: ON';
                        btn.classList.add('active');
                    } else {
                        btn.innerHTML = '<span class="status-indicator status-off"></span>Relay: OFF';
                        btn.classList.remove('active');
                    }
                    retryCount = 0; // Reset retry count on success
                })
                .catch(error => {
                    btn.classList.remove('loading');
                    console.error('Error toggling relay:', error);
                    showError('Failed to toggle relay: ' + error.message);
                    document.getElementById('connectionStatus').textContent = 'Error';
                    isConnected = false;
                });
        }

        function updateSensorCard(id, status) {
            const card = document.getElementById(id);
            if (!card) return;
            
            card.classList.remove('alert', 'safe', 'warning');
            
            if (status === "Detected" || status === "Motion" || status === "Flame") {
                card.classList.add('alert');
            } else if (status === "Safe" || status === "Clear" || status === "Stable") {
                card.classList.add('safe');
            } else if (status === "Error") {
                card.classList.add('warning');
            }
        }

        function updateData() {
            fetch('/data')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Received data:', data);
                    updateCount++;
                    retryCount = 0; // Reset retry count on success
                    
                    // Validate and update environmental sensors
                    const temp = typeof data.temperature === 'number' ? data.temperature : 0;
                    const hum = typeof data.humidity === 'number' ? data.humidity : 0;
                    const airVal = typeof data.airValue === 'number' ? data.airValue : 0;
                    
                    // Update temperature
                    document.getElementById("tempGauge").textContent = temp + "°C";
                    
                    // Update humidity
                    document.getElementById("humGauge").textContent = hum + "%";
                    
                    // Update rainfall
                    document.getElementById("rainValue").textContent = data.rainfall || "--";
                    
                    // Update air quality
                    document.getElementById("airGauge").textContent = airVal;
                    document.getElementById("airStatus").textContent = data.airQuality || "--";
                    
                    // Update safety sensors
                    document.getElementById("flameValue").textContent = data.flame || "--";
                    document.getElementById("motionValue").textContent = data.motion || "--";
                    document.getElementById("earthquakeValue").textContent = data.earthquake || "--";
                    
                    // Update control button
                    const relayBtn = document.getElementById("relayBtn");
                    if (data.relay == 1 || data.relay === true || data.relay === "true") {
                        relayBtn.innerHTML = '<span class="status-indicator status-on"></span>Relay: ON';
                        relayBtn.classList.add('active');
                    } else {
                        relayBtn.innerHTML = '<span class="status-indicator status-off"></span>Relay: OFF';
                        relayBtn.classList.remove('active');
                    }
                    
                    // Update sensor card styles
                    updateSensorCard("flameCard", data.flame);
                    updateSensorCard("motionCard", data.motion);
                    updateSensorCard("earthquakeCard", data.earthquake);
                    
                    // Update connection status
                    document.getElementById('connectionStatus').textContent = 'Connected';
                    document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();
                    document.getElementById('deviceCount').textContent = updateCount;
                    isConnected = true;
                })
                .catch(error => {
                    retryCount++;
                    console.error('Error fetching data (attempt ' + retryCount + '):', error);
                    
                    if (retryCount >= maxRetries) {
                        showError('Connection lost. Retrying...');
                        document.getElementById('connectionStatus').textContent = 'Disconnected';
                        isConnected = false;
                        retryCount = 0; // Reset for next cycle
                    }
                });
        }

        // Initialize
        updateTime();
        
        // Wait a bit before first data fetch to ensure server is ready
        setTimeout(() => {
            updateData();
        }, 2000);
        
        // Auto-update intervals
        setInterval(updateTime, 1000);
        setInterval(updateData, 3000); // Every 3 seconds

        // Add visibility change listener to pause updates when tab is not visible
        document.addEventListener('visibilitychange', function() {
            if (!document.hidden) {
                // Tab became visible again, fetch fresh data
                setTimeout(updateData, 500);
            }
        });

        // Initial connection status
        document.getElementById('connectionStatus').textContent = 'Connecting...';
    </script>
</body>
</html>
)====";

/*************************************************
 *   JSON Data Builder - Fixed and Enhanced
 *************************************************/
String buildJSONData() {
  String rainfallStatus = getRainfallStatus();
  float  temperature    = sht31.readTemperature();
  float  humidity       = sht31.readHumidity();
  String flameStatus    = readFlameStatus();
  String airStatus      = readAirQualityStatus();
  uint16_t gasValue     = readMQ3Value();
  String motionStatus   = readMotionStatus();
  String earthquakeStatus = readEarthquakeStatus();

  // Handle temperature with proper validation
  int tempDisplay = 25; // Default room temperature
  if (!isnan(temperature) && temperature > -50 && temperature < 100) {
    tempDisplay = (int)temperature;
  }

  // Handle humidity with proper validation
  int humDisplay = 50; // Default humidity
  if (!isnan(humidity) && humidity >= 0 && humidity <= 100) {
    humDisplay = (int)humidity;
  }

  // Ensure all string values are not empty
  if (rainfallStatus.length() == 0) rainfallStatus = "Unknown";
  if (flameStatus.length() == 0) flameStatus = "Unknown";
  if (airStatus.length() == 0) airStatus = "Unknown";
  if (motionStatus.length() == 0) motionStatus = "Unknown";
  if (earthquakeStatus.length() == 0) earthquakeStatus = "Unknown";

  String json = "{";
  json += "\"temperature\":" + String(tempDisplay) + ",";
  json += "\"humidity\":"    + String(humDisplay)  + ",";
  json += "\"rainfall\":\""  + rainfallStatus   + "\",";
  json += "\"flame\":\""     + flameStatus      + "\",";
  json += "\"airQuality\":\"" + airStatus       + "\",";
  json += "\"airValue\":"    + String(gasValue) + ",";
  json += "\"motion\":\""    + motionStatus     + "\",";
  json += "\"earthquake\":\"" + earthquakeStatus + "\",";
  json += "\"relay\":"       + String(relayState ? 1 : 0) + ",";
  json += "\"timestamp\":\""  + String(millis()) + "\"";
  json += "}";

  Serial.println("JSON Output: " + json);
  return json;
}

/*************************************************
 *        Setup & Main Loop - Enhanced Error Handling
 *************************************************/
void setup() {
  Serial.begin(115200);
  delay(1000);
  
  Wire.begin(21, 22);
  Wire.setClock(400000);

  // Initialize U8g2
  if (!u8g2.begin()) {
    Serial.println("Failed to initialize display!");
  }
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_6x10_tr);
  u8g2.sendBuffer();

  showProfessionalBootScreen();
  
  if (!sht31.begin(0x45)) {
    Serial.println("SHT31 not found. Check wiring!");
  } else {
    Serial.println("SHT31 Sensor initialized successfully.");
  }

  pinMode(BTN_UP,     INPUT_PULLUP);
  pinMode(BTN_DOWN,   INPUT_PULLUP);
  pinMode(BTN_LEFT,   INPUT_PULLUP);
  pinMode(BTN_RIGHT,  INPUT_PULLUP);
  pinMode(BTN_CENTER, INPUT_PULLUP);

  touchAttachInterrupt(TOUCH_PIN1, NULL, threshold);
  touchAttachInterrupt(TOUCH_PIN2, NULL, threshold);
  touchAttachInterrupt(TOUCH_PIN3, NULL, threshold);
  touchAttachInterrupt(TOUCH_PIN4, NULL, threshold);

  configureBuzzer();
  updateDisplay();

  setupWiFiAP();

  // Web server routes with enhanced error handling
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    Serial.println("Dashboard requested");
    request->send_P(200, "text/html", dashboard_html);
  });

  server.on("/data", HTTP_GET, [](AsyncWebServerRequest *request){
    Serial.println("Data requested");
    String json = buildJSONData();
    request->send(200, "application/json", json);
  });

  server.on("/toggleRelay", HTTP_GET, [](AsyncWebServerRequest *request){
    Serial.println("Relay toggle requested");
    relayState = !relayState;
    controlRelay(relayState);
    String resp = "{\"relay\":" + String(relayState ? 1 : 0) + ",\"status\":\"success\"}";
    request->send(200, "application/json", resp);
  });

  // Add CORS headers for better compatibility
  DefaultHeaders::Instance().addHeader("Access-Control-Allow-Origin", "*");
  DefaultHeaders::Instance().addHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
  DefaultHeaders::Instance().addHeader("Access-Control-Allow-Headers", "Content-Type");

  server.begin();
  Serial.println("HOME Environmental Monitoring System Ready.");
  Serial.print("Connect to WiFi: ");
  Serial.println(AP_SSID);
  Serial.print("Password: ");
  Serial.println(AP_PASSWORD);
  Serial.print("IP Address: ");
  Serial.println(WiFi.softAPIP());
}

/*************************************************
 *        Navigation Handler
 *************************************************/
void handleNavigation() {
  if (currentScreen != 9 && currentScreen != 10) {
    if (digitalRead(BTN_UP) == LOW) {
      currentScreen = (currentScreen - 1 + 9) % 9;
      delay(200); 
    }
    if (digitalRead(BTN_DOWN) == LOW) {
      currentScreen = (currentScreen + 1) % 9;
      delay(200); 
    }
  }

  // Music Mode - LEFT to enter, RIGHT to exit
  if (currentScreen == 0 && digitalRead(BTN_LEFT) == LOW) {
    currentScreen = 9;
    delay(200);
  }
  if (currentScreen == 9 && digitalRead(BTN_RIGHT) == LOW) {
    currentScreen = 0;
    delay(200);
  }

  // IoT Mode - RIGHT to enter, LEFT to exit  
  if (currentScreen == 0 && digitalRead(BTN_RIGHT) == LOW && !iotModeActive) {
    iotModeActive = true;
    currentScreen = 10;
    delay(200);
  }
  if (currentScreen == 10 && digitalRead(BTN_LEFT) == LOW) {
    stopWiFiAP();
    iotModeActive = false;
    currentScreen = 0;
    delay(200);
  }

  if (digitalRead(BTN_CENTER) == LOW) {
    if (currentScreen == 4) { // Relay control screen
      relayState = !relayState;
      controlRelay(relayState);
      delay(300);
    }
  }
}

/*************************************************
 *        Helper Functions
 *************************************************/
void drawIcon(int x, int y, const char* icon) {
  u8g2.setFont(u8g2_font_unifont_t_symbols);
  u8g2.drawStr(x, y, icon);
}

void drawProgressBar(int x, int y, int width, int height, int percentage) {
  u8g2.drawFrame(x, y, width, height);
  int fillWidth = map(percentage, 0, 100, 0, width - 2);
  if (fillWidth > 0) {
    u8g2.drawBox(x + 1, y + 1, fillWidth, height - 2);
  }
}

void drawStatusIndicator(int x, int y, bool state) {
  if (state) {
    u8g2.drawDisc(x, y, 3);
  } else {
    u8g2.drawCircle(x, y, 3);
  }
}

/*************************************************
 *        Enhanced Professional Boot Screen
 *************************************************/
void showProfessionalBootScreen() {
  // Phase 1: Animated Logo with better effects
  for (int frame = 0; frame < 25; frame++) {
    u8g2.clearBuffer();
    
    // Animated border with pulsing effect
    if (frame > 3) {
      int borderSize = 2 + (frame % 4);
      u8g2.drawRFrame(10, 8, 108, 48, 5);
      if (frame > 8) {
        u8g2.drawRFrame(12, 10, 104, 44, 3);
      }
    }
    
    // Company name with sliding animation
    if (frame > 6) {
      u8g2.setFont(u8g2_font_ncenB14_tr);
      int textX = max(35, 150 - frame * 8);
      u8g2.drawStr(textX, 32, "HOME");
    }
    
    // Version info with fade-in effect
    if (frame > 15) {
      u8g2.setFont(u8g2_font_6x10_tr);
      u8g2.drawStr(32, 45, "IoT KIT");
    }
    
    // Loading dots animation
    if (frame > 10) {
      for (int i = 0; i < 3; i++) {
        if ((frame + i * 3) % 9 < 6) {
          u8g2.drawDisc(45 + i * 10, 50, 1);
        }
      }
    }
    
    u8g2.sendBuffer();
    delay(80);
  }
  
  // Phase 2: Enhanced Loading sequence
  const char* loadSteps[] = {
    "Initializing Core...",
    "Loading Sensors...", 
    "Configuring Safety...",
    "Starting Services...",
    "System Ready!"
  };
  
  for (int step = 0; step < 5; step++) {
    u8g2.clearBuffer();
    
    // Centered header
    u8g2.setFont(u8g2_font_ncenB10_tr);
    u8g2.drawStr(48, 15, "HOME");
    
    // Loading text - centered
    u8g2.setFont(u8g2_font_6x10_tr);
    int textWidth = strlen(loadSteps[step]) * 6;
    int textX = (128 - textWidth) / 2;
    u8g2.drawStr(textX, 32, loadSteps[step]);
    
    // Enhanced progress bar with animation
    int progress = ((step + 1) * 100) / 5;
    u8g2.drawRFrame(14, 42, 100, 10, 2);
    u8g2.drawBox(16, 44, (progress * 96) / 100, 6);
    
    // Animated progress indicator
    int indicatorX = 16 + (progress * 96) / 100;
    if (step < 4) {
      u8g2.drawDisc(indicatorX, 47, 2);
    }
    
    // Centered percentage
    u8g2.setCursor(58, 60);
    u8g2.print(progress);
    u8g2.print("%");
    
    u8g2.sendBuffer();
    delay(700);
  }
  
  delay(500);
}

/*************************************************
 *        Improved Main Display with Buzzer Alerts
 *************************************************/
void updateDisplay() {
  String rainfallStatus = getRainfallStatus();
  float  temperature    = sht31.readTemperature();
  float  humidity       = sht31.readHumidity();
  String flameStatus    = readFlameStatus();
  String motionStatus   = readMotionStatus();
  String airStatus      = readAirQualityStatus();

  // Buzzer alerts for sensor detections
  static unsigned long lastBuzzerTime = 0;
  unsigned long currentTime = millis();
  
  if (currentTime - lastBuzzerTime > 2000) { // Check every 2 seconds
    if (rainfallStatus == "Wet") {
      // Rain detected - 2 short beeps
      tone(BUZZER_PIN, 1000, 200);
      delay(250);
      tone(BUZZER_PIN, 1000, 200);
      lastBuzzerTime = currentTime;
    } else if (flameStatus == "Flame") {
      // Flame detected - continuous urgent beeping
      tone(BUZZER_PIN, 2000, 300);
      delay(100);
      tone(BUZZER_PIN, 2000, 300);
      delay(100);
      tone(BUZZER_PIN, 2000, 300);
      lastBuzzerTime = currentTime;
    } else if (motionStatus == "Motion") {
      // Motion detected - 3 medium beeps
      tone(BUZZER_PIN, 1500, 150);
      delay(200);
      tone(BUZZER_PIN, 1500, 150);
      delay(200);
      tone(BUZZER_PIN, 1500, 150);
      lastBuzzerTime = currentTime;
    }
  }

  u8g2.clearBuffer();

  // Removed the header to make more space for navigation text
  // Environmental sensors grid - adjusted positioning
  // Temperature - Top Left (moved up)
  u8g2.drawRFrame(3, 2, 58, 19, 2);
  u8g2.setFont(u8g2_font_5x7_tr);
  u8g2.drawStr(6, 9, "TEMP");
  u8g2.setFont(u8g2_font_6x10_tr);
  String tempStr = isnan(temperature) ? "--.-C" : String(temperature, 1) + "C";
  int tempX = 6 + (52 - tempStr.length() * 6) / 2;
  u8g2.drawStr(tempX, 18, tempStr.c_str());
  
  // Humidity - Top Right (moved up)
  u8g2.drawRFrame(67, 2, 58, 19, 2);
  u8g2.setFont(u8g2_font_5x7_tr);
  u8g2.drawStr(70, 9, "HUM");
  u8g2.setFont(u8g2_font_6x10_tr);
  String humStr = isnan(humidity) ? "--%%" : String((int)humidity) + "%";
  int humX = 70 + (52 - humStr.length() * 6) / 2;
  u8g2.drawStr(humX, 18, humStr.c_str());
  
  // Rainfall - Middle Left
  u8g2.drawRFrame(3, 24, 58, 19, 2);
  u8g2.setFont(u8g2_font_5x7_tr);
  u8g2.drawStr(6, 31, "RAIN");
  u8g2.setFont(u8g2_font_6x10_tr);
  int rainX = 6 + (52 - rainfallStatus.length() * 6) / 2;
  u8g2.drawStr(rainX, 40, rainfallStatus.c_str());
  
  // Air Quality - Middle Right
  u8g2.drawRFrame(67, 24, 58, 19, 2);
  u8g2.setFont(u8g2_font_5x7_tr);
  u8g2.drawStr(70, 31, "AIR");
  u8g2.setFont(u8g2_font_6x10_tr);
  int airX = 70 + (52 - airStatus.length() * 6) / 2;
  u8g2.drawStr(airX, 40, airStatus.c_str());
  
  // Navigation bar with better visibility - more space now
  u8g2.drawHLine(0, 47, 128);
  u8g2.setFont(u8g2_font_6x10_tr); // Larger font for better visibility
  u8g2.drawStr(5, 56, "UP:DET");
  u8g2.drawStr(45, 56, "L:MUS");
  u8g2.drawStr(90, 56, "R:IoT");
  
  // Enhanced alert overlay with better animation - adjusted position
  if (flameStatus == "Flame" || motionStatus == "Motion") {
    if ((millis() / 400) % 2) {
      // Animated alert box
      u8g2.drawRBox(10, 6, 108, 20, 4);
      u8g2.setColorIndex(0);
      u8g2.setFont(u8g2_font_7x13B_tr);
      
      String alertText = (flameStatus == "Flame") ? "FIRE ALERT!" : "MOTION DET!";
      int alertX = 14 + (100 - alertText.length() * 7) / 2;
      u8g2.drawStr(alertX, 18, alertText.c_str());
      u8g2.setColorIndex(1);
      
      // Blinking warning indicators
      u8g2.drawDisc(15, 13, 2);
      u8g2.drawDisc(113, 13, 2);
    }
  }
  
  u8g2.sendBuffer();
}

/*************************************************
 *        Enhanced Detail Views with Better Animations and Buzzer Alerts
 *************************************************/
void updateDetailView() {
  // Add buzzer alerts for detail views
  static unsigned long lastDetailBuzzerTime = 0;
  unsigned long currentTime = millis();
  
  u8g2.clearBuffer();

  switch (currentScreen) {
    case 1: { // Rainfall Detail with improved animation
      String rainfallStatus = getRainfallStatus();
      
      // Buzzer alert for rain in detail view
      if (currentTime - lastDetailBuzzerTime > 3000 && rainfallStatus == "Wet") {
        tone(BUZZER_PIN, 1000, 200);
        delay(250);
        tone(BUZZER_PIN, 1000, 200);
        lastDetailBuzzerTime = currentTime;
      }
      
      // Centered header
      u8g2.drawBox(0, 0, 128, 12);
      u8g2.setColorIndex(0);
      u8g2.setFont(u8g2_font_7x13B_tr);
      u8g2.drawStr(35, 9, "RAINFALL");
      u8g2.setColorIndex(1);
      
      // Main display area - centered
      u8g2.drawRFrame(15, 16, 98, 30, 4);
      
      // Status text - centered
      u8g2.setFont(u8g2_font_ncenB10_tr);
      int statusX = 19 + (90 - rainfallStatus.length() * 10) / 2;
      u8g2.drawStr(statusX, 32, rainfallStatus.c_str());
      
      // Enhanced animated rain drops
      if (rainfallStatus == "Wet") {
        for (int i = 0; i < 6; i++) {
          int dropY = 18 + (millis() / 150 + i * 4) % 12;
          int dropX = 80 + i * 6;
          u8g2.drawPixel(dropX, dropY);
          u8g2.drawPixel(dropX, dropY + 1);
          u8g2.drawPixel(dropX, dropY + 2);
        }
      }
      
      // Centered condition text
      u8g2.setFont(u8g2_font_6x10_tr);
      String conditionText = "Condition: " + String(rainfallStatus == "Wet" ? "RAINING" : "DRY");
      int condX = (128 - conditionText.length() * 6) / 2;
      u8g2.drawStr(condX, 55, conditionText.c_str());
      
      break;
    }
    
    case 2: { // Temperature Detail with thermometer animation
      float temperature = sht31.readTemperature();
      
      // Centered header
      u8g2.drawBox(0, 0, 128, 12);
      u8g2.setColorIndex(0);
      u8g2.setFont(u8g2_font_7x13B_tr);
      u8g2.drawStr(20, 9, "TEMPERATURE");
      u8g2.setColorIndex(1);
      
      // Main display - centered
      u8g2.drawRFrame(20, 16, 88, 30, 4);
      
      // Temperature value - properly centered
      if (!isnan(temperature)) {
        u8g2.setFont(u8g2_font_ncenB14_tr);
        String tempText = String(temperature, 1) + "C";
        // Calculate proper center position
        int textWidth = tempText.length() * 10; // Approximate width for this font
        int tempX = 20 + (88 - textWidth) / 2;
        u8g2.drawStr(tempX, 35, tempText.c_str());
        
        // Animated thermometer bar
        int tempLevel = map(constrain(temperature, 0, 50), 0, 50, 0, 20);
        u8g2.drawFrame(25, 20, 4, 22);
        u8g2.drawBox(26, 41 - tempLevel, 2, tempLevel);
        u8g2.drawDisc(27, 42, 2);
      } else {
        u8g2.setFont(u8g2_font_7x13B_tr);
        u8g2.drawStr(50, 32, "ERROR");
      }
      
      // Status classification - centered
      u8g2.setFont(u8g2_font_6x10_tr);
      String status = "Status: ";
      if (temperature < 15) status += "COLD";
      else if (temperature < 25) status += "NORMAL";
      else if (temperature < 35) status += "WARM";
      else status += "HOT";
      
      int statusX = (128 - status.length() * 6) / 2;
      u8g2.drawStr(statusX, 55, status.c_str());
      
      break;
    }
    
    case 3: { // Humidity Detail with animated water drops
      float humidity = sht31.readHumidity();
      
      // Centered header
      u8g2.drawBox(0, 0, 128, 12);
      u8g2.setColorIndex(0);
      u8g2.setFont(u8g2_font_7x13B_tr);
      u8g2.drawStr(35, 9, "HUMIDITY");
      u8g2.setColorIndex(1);
      
      // Main display - centered
      u8g2.drawRFrame(20, 16, 88, 30, 4);
      
      // Humidity value - centered
      if (!isnan(humidity)) {
        u8g2.setFont(u8g2_font_ncenB14_tr);
        String humText = String((int)humidity) + "%";
        int humX = 24 + (80 - humText.length() * 14) / 2;
        u8g2.drawStr(humX, 35, humText.c_str());
        
        // Animated water drops based on humidity
        if (humidity > 60) {
          for (int i = 0; i < 3; i++) {
            int dropY = 20 + (millis() / 200 + i * 3) % 8;
            u8g2.drawCircle(85 + i * 8, dropY, 1);
          }
        }
      } else {
        u8g2.setFont(u8g2_font_7x13B_tr);
        u8g2.drawStr(50, 32, "ERROR");
      }
      
      // Enhanced humidity bar - centered
      if (!isnan(humidity)) {
        u8g2.drawFrame(24, 50, 80, 6);
        int barWidth = map(humidity, 0, 100, 0, 78);
        u8g2.drawBox(25, 51, barWidth, 4);
      }
      
      // Status - centered
      u8g2.setFont(u8g2_font_6x10_tr);
      String humStatus = humidity < 30 ? "[DRY]" : humidity < 60 ? "[NORMAL]" : "[HUMID]";
      int humStatusX = (128 - humStatus.length() * 6) / 2;
      u8g2.drawStr(humStatusX, 62, humStatus.c_str());
      
      break;
    }
  }

  // Centered navigation footer
  u8g2.setFont(u8g2_font_micro_tr);
  u8g2.drawStr(40, 63, "UP/DOWN:NAV");

  u8g2.sendBuffer();
}

/*************************************************
 *        Enhanced Sensor Views with Better Animations and Buzzer Alerts
 *************************************************/
void updateFlameView() {
  String flameStatus = readFlameStatus();
  
  // Buzzer alert for flame in detail view
  static unsigned long lastFlameBuzzerTime = 0;
  unsigned long currentTime = millis();
  
  if (currentTime - lastFlameBuzzerTime > 2000 && flameStatus == "Flame") {
    tone(BUZZER_PIN, 2000, 300);
    delay(100);
    tone(BUZZER_PIN, 2000, 300);
    delay(100);
    tone(BUZZER_PIN, 2000, 300);
    lastFlameBuzzerTime = currentTime;
  }
  
  u8g2.clearBuffer();
  
  // Centered header
  u8g2.drawBox(0, 0, 128, 12);
  u8g2.setColorIndex(0);
  u8g2.setFont(u8g2_font_7x13B_tr);
  u8g2.drawStr(20, 9, "FLAME SENSOR");
  u8g2.setColorIndex(1);
  
  if (flameStatus == "Flame") {
    // Enhanced alert mode with pulsing animation
    if ((millis() / 150) % 2) {
      u8g2.drawRFrame(10, 14, 108, 32, 4);
      u8g2.drawRFrame(12, 16, 104, 28, 2);
    }
    
    // Properly centered flame text with appropriate font size
    u8g2.setFont(u8g2_font_ncenB10_tr);
    String fireText = "FIRE";
    String alertText = "ALERT!";
    
    // Calculate center positions
    int fireX = (128 - fireText.length() * 10) / 2;
    int alertX = (128 - alertText.length() * 10) / 2;
    
    u8g2.drawStr(fireX, 25, fireText.c_str());
    u8g2.drawStr(alertX, 38, alertText.c_str());
    
    // Flickering flame simulation
    for (int i = 0; i < 5; i++) {
      if ((millis() + i * 100) % 300 < 150) {
        u8g2.drawPixel(25 + i * 15, 20 + (millis() / 100 + i) % 3);
        u8g2.drawPixel(25 + i * 15, 21 + (millis() / 100 + i) % 3);
      }
    }
    
    // Centered relay status
    u8g2.setFont(u8g2_font_6x10_tr);
    String relayText = "Relay: " + String(relayState ? "ACTIVATED" : "READY");
    int relayX = (128 - relayText.length() * 6) / 2;
    u8g2.drawStr(relayX, 55, relayText.c_str());
    
  } else {
    // Safe mode - centered
    u8g2.drawRFrame(25, 16, 78, 28, 4);
    
    u8g2.setFont(u8g2_font_6x10_tr);
    String noFireText = "NO FIRE";
    String detectedText = "DETECTED";
    
    // Center align the text properly
    int noFireX = 25 + (78 - noFireText.length() * 6) / 2;
    int detectedX = 25 + (78 - detectedText.length() * 6) / 2;
    
    u8g2.drawStr(noFireX, 25, noFireText.c_str());
    u8g2.drawStr(detectedX, 35, detectedText.c_str());
    
    String safeText = "System Safe";
    int safeX = (128 - safeText.length() * 6) / 2;
    u8g2.drawStr(safeX, 55, safeText.c_str());
  }
  
  u8g2.sendBuffer();
}

void updateMotionView() {
  String motionStatus = readMotionStatus();
  
  // Buzzer alert for motion in detail view
  static unsigned long lastMotionBuzzerTime = 0;
  unsigned long currentTime = millis();
  
  if (currentTime - lastMotionBuzzerTime > 3000 && motionStatus == "Motion") {
    tone(BUZZER_PIN, 1500, 150);
    delay(200);
    tone(BUZZER_PIN, 1500, 150);
    delay(200);
    tone(BUZZER_PIN, 1500, 150);
    lastMotionBuzzerTime = currentTime;
  }
  
  u8g2.clearBuffer();
  
  // Centered header
  u8g2.drawBox(0, 0, 128, 12);
  u8g2.setColorIndex(0);
  u8g2.setFont(u8g2_font_7x13B_tr);
  u8g2.drawStr(15, 9, "MOTION SENSOR");
  u8g2.setColorIndex(1);
  
  if (motionStatus == "Motion") {
    // Motion detected with radar-like animation
    if ((millis() / 250) % 2) {
      u8g2.drawRBox(20, 16, 88, 28, 4);
      u8g2.setColorIndex(0);
      
      u8g2.setFont(u8g2_font_ncenB10_tr);
      String motionText = "MOTION";
      String alertText = "ALERT!";
      
      // Center align motion text
      int motionX = 20 + (88 - motionText.length() * 10) / 2;
      int alertX = 20 + (88 - alertText.length() * 10) / 2;
      
      u8g2.drawStr(motionX, 25, motionText.c_str());
      u8g2.drawStr(alertX, 38, alertText.c_str());
      
      u8g2.setColorIndex(1);
    }
    
    // Animated radar sweep
    int sweepAngle = (millis() / 50) % 360;
    for (int r = 5; r < 15; r += 3) {
      u8g2.drawCircle(64, 30, r);
    }
    
    String occupiedText = "Area: OCCUPIED";
    int occupiedX = (128 - occupiedText.length() * 6) / 2;
    u8g2.setFont(u8g2_font_6x10_tr);
    u8g2.drawStr(occupiedX, 55, occupiedText.c_str());
    
  } else {
    // No motion - centered display
    u8g2.drawRFrame(25, 16, 78, 28, 4);
    
    u8g2.setFont(u8g2_font_6x10_tr);
    String noMotionText = "NO MOTION";
    String clearText = "CLEAR";
    
    // Center align text
    int noMotionX = 25 + (78 - noMotionText.length() * 6) / 2;
    int clearX = 25 + (78 - clearText.length() * 6) / 2;
    
    u8g2.drawStr(noMotionX, 25, noMotionText.c_str());
    u8g2.drawStr(clearX, 35, clearText.c_str());
    
    String areaClearText = "Area: CLEAR";
    int areaClearX = (128 - areaClearText.length() * 6) / 2;
    u8g2.drawStr(areaClearX, 55, areaClearText.c_str());
  }
  
  u8g2.sendBuffer();
}

/*************************************************
 *        Enhanced Music Mode with Better Piano Animation
 *************************************************/
void updateMusicModeView() {
  u8g2.clearBuffer();
  
  // Centered header
  u8g2.drawBox(0, 0, 128, 12);
  u8g2.setColorIndex(0);
  u8g2.setFont(u8g2_font_7x13B_tr);
  u8g2.drawStr(20, 9, "TOUCH PIANO");
  u8g2.setColorIndex(1);
  
  touch1 = touchRead(TOUCH_PIN1);
  touch2 = touchRead(TOUCH_PIN2);
  touch3 = touchRead(TOUCH_PIN3);
  touch4 = touchRead(TOUCH_PIN4);
  
  const char* notes[] = {"A", "B", "C", "D"};
  const int frequencies[] = {262, 294, 330, 349};
  
  bool anyPressed = false;
  
  // Centered piano keys
  int startX = (128 - (4 * 26 - 2)) / 2;
  
  for (int i = 0; i < 4; i++) {
    bool pressed = false;
    switch (i) {
      case 0: pressed = (touch1 < threshold); break;
      case 1: pressed = (touch2 < threshold); break;
      case 2: pressed = (touch3 < threshold); break;
      case 3: pressed = (touch4 < threshold); break;
    }
    
    int keyX = startX + i * 26;
    int keyY = 20;
    int keyW = 24;
    int keyH = 28;
    
    if (pressed) {
      // Pressed key animation
      u8g2.drawRBox(keyX, keyY, keyW, keyH, 3);
      u8g2.setColorIndex(0);
      u8g2.setFont(u8g2_font_ncenB14_tr);
      u8g2.drawStr(keyX + 8, keyY + 18, notes[i]);
      u8g2.setColorIndex(1);
      
      // Musical note animation floating up
      for (int j = 0; j < 3; j++) {
        int noteY = 15 - (millis() / 100 + j * 5) % 10;
        if (noteY > 5) {
          u8g2.drawPixel(keyX + 12 + j * 2, noteY);
          u8g2.drawPixel(keyX + 12 + j * 2 + 1, noteY);
        }
      }
      
      playTone(frequencies[i]);
      anyPressed = true;
    } else {
      // Normal key
      u8g2.drawRFrame(keyX, keyY, keyW, keyH, 3);
      u8g2.setFont(u8g2_font_ncenB10_tr);
      u8g2.drawStr(keyX + 9, keyY + 16, notes[i]);
    }
  }
  
  if (!anyPressed) {
    stopTone();
  }
  
  // Centered exit instruction
  u8g2.setFont(u8g2_font_micro_tr);
  u8g2.drawStr(75, 63, "RIGHT: EXIT");
  
  u8g2.sendBuffer();
}

/*************************************************
 *        IoT Mode Dashboard
 *************************************************/
void updateIoTModeScreen() {
  u8g2.clearBuffer();
  
  // Header
  u8g2.drawBox(0, 0, 128, 12);
  u8g2.setColorIndex(0);
  u8g2.setFont(u8g2_font_7x13B_tr);
  u8g2.drawStr(30, 10, "IoT DASHBOARD");
  u8g2.setColorIndex(1);
  
  // Info box
  u8g2.drawRFrame(5, 16, 118, 36, 3);
  
  u8g2.setFont(u8g2_font_6x10_tr);
  u8g2.drawStr(10, 25, "SSID: ");
  u8g2.drawStr(40, 25, AP_SSID);
  
  u8g2.drawStr(10, 33, "Pass: ");
  u8g2.drawStr(40, 33, AP_PASSWORD);
  
  u8g2.drawStr(10, 41, "IP: ");
  IPAddress IP = WiFi.softAPIP();
  u8g2.setCursor(30, 41);
  u8g2.print(IP);
  
  u8g2.drawStr(10, 49, "Connected: ");
  int clients = WiFi.softAPgetStationNum();
  u8g2.setCursor(70, 49);
  u8g2.print(clients);
  u8g2.print(" device");
  if (clients != 1) u8g2.print("s");
  
  // Connection status indicator
  if (clients > 0) {
    u8g2.drawDisc(100, 25, 3);
  }
  
  // Exit instruction
  u8g2.setFont(u8g2_font_micro_tr);
  u8g2.drawStr(10, 63, "LEFT: EXIT");
  
  u8g2.sendBuffer();
}

/*************************************************
 *        Relay Control View
 *************************************************/
void updateRelayControlView() {
  u8g2.clearBuffer();
  
  // Centered header
  u8g2.drawBox(0, 0, 128, 12);
  u8g2.setColorIndex(0);
  u8g2.setFont(u8g2_font_7x13B_tr);
  u8g2.drawStr(20, 9, "RELAY CONTROL");
  u8g2.setColorIndex(1);
  
  // Main control area - centered
  u8g2.drawRFrame(20, 16, 88, 32, 4);
  
  // Status display - centered
  u8g2.setFont(u8g2_font_6x10_tr);
  u8g2.drawStr(45, 25, "Status:");
  u8g2.setFont(u8g2_font_ncenB14_tr);
  String statusText = relayState ? "ON" : "OFF";
  int statusX = 24 + (80 - statusText.length() * 14) / 2;
  u8g2.drawStr(statusX, 40, statusText.c_str());
  
  // Enhanced visual indicator with animation
  if (relayState) {
    if ((millis() / 300) % 2) {
      u8g2.drawDisc(90, 32, 4);
    }
    u8g2.drawCircle(90, 32, 6);
    u8g2.drawCircle(90, 32, 8);
  } else {
    u8g2.drawCircle(90, 32, 4);
  }
  
  // Centered control instruction
  u8g2.drawBox(0, 52, 128, 12);
  u8g2.setColorIndex(0);
  u8g2.setFont(u8g2_font_6x10_tr);
  String instruction = "PRESS CENTER TO TOGGLE";
  int instrX = (128 - instruction.length() * 6) / 2;
  u8g2.drawStr(instrX, 60, instruction.c_str());
  u8g2.setColorIndex(1);
  
  u8g2.sendBuffer();
}

/*************************************************
 *        Air Quality View with MQ3 Gas Sensor - Updated
 *************************************************/
void updateAirQualityView() {
  String airStatus = readAirQualityStatus();
  uint16_t gasValue = readMQ3Value();  // Updated to use MQ3
  
  u8g2.clearBuffer();
  
  // Centered header
  u8g2.drawBox(0, 0, 128, 12);
  u8g2.setColorIndex(0);
  u8g2.setFont(u8g2_font_7x13B_tr);
  u8g2.drawStr(10, 9, "Air Sensor");  // Updated title
  u8g2.setColorIndex(1);
  
  // Main display - centered
  u8g2.drawRFrame(15, 14, 98, 32, 4);
  
  // Gas sensor reading - centered and prominent
  u8g2.setFont(u8g2_font_ncenB14_tr);
  String readingText = String(gasValue);
  int readingX = 19 + (90 - readingText.length() * 8) / 2;  // Adjusted spacing
  u8g2.drawStr(readingX, 28, readingText.c_str());
  
  // Gas quality status - centered
  u8g2.setFont(u8g2_font_6x10_tr);
  String statusText = "Status: " + airStatus;
  int statusX = 19 + (90 - statusText.length() * 6) / 2;
  u8g2.drawStr(statusX, 38, statusText.c_str());
  
  // Enhanced gas level bar - based on MQ3 range (0-1023)
  drawGasBar(gasValue);
  
  // Animated gas particles based on concentration
  if (gasValue > 100) {
    for (int i = 0; i < 4; i++) {
      int particleX = 20 + (millis() / 100 + i * 20) % 88;
      int particleY = 18 + i % 3;
      u8g2.drawPixel(particleX, particleY);
    }
  }
  
  u8g2.sendBuffer();
}

/*************************************************
 *        Earthquake View with Shaking Animation
 *************************************************/
void updateEarthquakeView() {
  String earthquakeStatus = readEarthquakeStatus();
  
  u8g2.clearBuffer();
  
  // Centered header
  u8g2.drawBox(0, 0, 128, 12);
  u8g2.setColorIndex(0);
  u8g2.setFont(u8g2_font_7x13B_tr);
  u8g2.drawStr(8, 9, "EARTHQUAKE SENSOR");
  u8g2.setColorIndex(1);
  
  if (earthquakeStatus == "Detected") {
    // Earthquake detected with enhanced shaking effect
    if ((millis() / 120) % 2) {
      int shakeX = random(-2, 3);
      int shakeY = random(-1, 2);
      u8g2.drawRBox(15 + shakeX, 16 + shakeY, 98, 28, 4);
      u8g2.setColorIndex(0);
      
      u8g2.setFont(u8g2_font_6x10_tr);
      u8g2.drawStr(35 + shakeX, 25 + shakeY, "EARTHQUAKE");
      u8g2.drawStr(35 + shakeX, 33 + shakeY, "DETECTED!");
      u8g2.drawStr(35 + shakeX, 41 + shakeY, "TAKE COVER");
      
      u8g2.setColorIndex(1);
    }
    
    // Seismic wave animation
    for (int i = 0; i < 5; i++) {
      int waveY = 30 + sin((millis() / 100.0) + i) * 3;
      u8g2.drawPixel(20 + i * 15, waveY);
      u8g2.drawPixel(21 + i * 15, waveY);
    }
    
    // Centered alert status
    u8g2.setFont(u8g2_font_6x10_tr);
    String alertText = "Alert: ACTIVE";
    int alertX = (128 - alertText.length() * 6) / 2;
    u8g2.drawStr(alertX, 55, alertText.c_str());
    
  } else {
    // Stable ground - centered display
    u8g2.drawRFrame(25, 16, 78, 28, 4);
    
    u8g2.setFont(u8g2_font_6x10_tr);
    u8g2.drawStr(45, 25, "STABLE");
    u8g2.drawStr(45, 35, "GROUND");
    
    String normalText = "Status: NORMAL";
    int normalX = (128 - normalText.length() * 6) / 2;
    u8g2.drawStr(normalX, 55, normalText.c_str());
  }
  
  u8g2.sendBuffer();
}

/*************************************************
 *             Control Functions
 *************************************************/
void controlRelay(bool state) {
  Wire.beginTransmission(RELAY_ADDRESS);
  Wire.write(state ? 1 : 0); 
  Wire.endTransmission();
}

/*************************************************
 *             Sensor Reading Functions
 *************************************************/
String getRainfallStatus() {
  Wire.beginTransmission(RAINFALL_SENSOR_ADDRESS);
  Wire.write(RAINFALL_COMMAND);
  if (Wire.endTransmission() != 0) {
    Serial.println("Rainfall sensor communication error");
    return "Error";
  }
  delay(10); // Small delay for sensor response
  Wire.requestFrom(RAINFALL_SENSOR_ADDRESS, 1);
  if (Wire.available() == 1) {
    uint8_t status = Wire.read();
    return (status == 0) ? "Wet" : "Dry";
  }
  return "No Data";
}

String readFlameStatus() {
  Wire.requestFrom(FLAME_SENSOR_ADDRESS, 1);
  delay(10);
  if (Wire.available() == 1) {
    uint8_t status = Wire.read();
    return (status == 1) ? "Flame" : "Safe";
  }
  return "No Data";
}

String readAirQualityStatus() {
  uint16_t gasValue = readMQ3Value();
  // Updated thresholds for MQ3 gas sensor (0-1023 range)
  if (gasValue < 100) return "Good";
  else if (gasValue < 300) return "Moderate";
  else if (gasValue < 500) return "Poor";
  else if (gasValue < 700) return "Bad";
  else return "Hazardous";
}

uint16_t readMQ3Value() {
  Wire.beginTransmission(AIR_QUALITY_ADDRESS);
  if (Wire.endTransmission() != 0) {
    Serial.println("MQ3 sensor communication error");
    return 0;
  }
  delay(10);
  Wire.requestFrom(AIR_QUALITY_ADDRESS, 2);
  if (Wire.available() == 2) {
    uint16_t value = (Wire.read() << 8) | Wire.read();
    return value;
  }
  return 0;
}

String readMotionStatus() {
  Wire.requestFrom(MOTION_SENSOR_ADDRESS, 1);
  delay(10);
  if (Wire.available() == 1) {
    uint8_t status = Wire.read();
    return (status == 1) ? "Motion" : "Clear";
  }
  return "No Data";
}

String readEarthquakeStatus() {
  Wire.requestFrom(EARTHQUAKE_SENSOR_ADDRESS, 1);
  delay(10);
  if (Wire.available() == 1) {
    uint8_t status = Wire.read();
    return (status == 1) ? "Detected" : "Stable";
  }
  return "No Data";
}

void drawGasBar(uint16_t val) {
  // Scale for bar (0-1023 range for MQ3)
  uint8_t width = map(val, 0, 1023, 0, 96);
  u8g2.drawFrame(15, 50, 98, 8);
  u8g2.drawBox(16, 51, width, 6);
  
  // Add percentage label
  u8g2.setFont(u8g2_font_micro_tr);
  String percentage = String(map(val, 0, 1023, 0, 100)) + "%";
  int percX = (128 - percentage.length() * 4) / 2;
  u8g2.drawStr(percX, 63, percentage.c_str());
}

/*************************************************
 *          Audio Functions
 *************************************************/
void configureBuzzer() {
  pinMode(BUZZER_PIN, OUTPUT); 
  digitalWrite(BUZZER_PIN, LOW);
}

void playTone(int frequency) {
  tone(BUZZER_PIN, frequency, 500);
}

void stopTone() {
  noTone(BUZZER_PIN);
}

/*************************************************
 *        WiFi Functions
 *************************************************/
void setupWiFiAP() {
  WiFi.mode(WIFI_AP);
  WiFi.softAP(AP_SSID, AP_PASSWORD);
  
  // Configure IP address if needed
  IPAddress local_ip(192, 168, 4, 1);
  IPAddress gateway(192, 168, 4, 1);
  IPAddress subnet(255, 255, 255, 0);
  WiFi.softAPConfig(local_ip, gateway, subnet);
  
  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);
}

void stopWiFiAP() {
  WiFi.softAPdisconnect(true);
  WiFi.mode(WIFI_OFF);
  Serial.println("WiFi AP stopped");
}

void loop() {
  handleNavigation();

  switch (currentScreen) {
    case 0:  
      updateDisplay();
      break;
    case 1: case 2: case 3:
      updateDetailView();
      break;
    case 4:
      updateRelayControlView();
      break;
    case 5:
      updateFlameView();
      break;
    case 6:
      updateAirQualityView();
      break;
    case 7:
      updateMotionView();
      break;
    case 8:
      updateEarthquakeView();
      break;
    case 9:
      updateMusicModeView();
      break;
    case 10:
      updateIoTModeScreen();
      break;
    default:
      currentScreen = 0;
      updateDisplay();
      break;
  }
}
