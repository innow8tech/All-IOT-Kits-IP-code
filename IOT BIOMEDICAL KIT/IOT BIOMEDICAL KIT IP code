#include <Wire.h>
#include <U8g2lib.h>   // Changed from Adafruit_SH110X to U8g2
#include <Arduino.h>
#include <WiFi.h>              
#include <AsyncTCP.h>          
#include <ESPAsyncWebServer.h>
#include "MAX30105.h"          // MAX30105 library for heart rate sensor
#include "heartRate.h"         // Heart rate calculation algorithm

/****************** I2C Addresses *****************/
#define HEART_RATE_SENSOR_ADDRESS 0x57  // MAX30102 Heart Rate & O2 Sensor
#define ALCOHOL_SENSOR_ADDRESS    0x41  // MQ3 Alcohol Sensor
#define TEMPERATURE_SENSOR_ADDRESS 0x33 // LM35 Temperature Sensor (I2C via ATtiny)
#define SMOKE_SENSOR_ADDRESS      0x42  // Smoke Sensor
#define COMMAND_REQUEST_DATA      2

#define OLED_I2C_ADDRESS 0x3C

// U8G2 Constructor - Use SSD1306 or SH1106 based on your display
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0);  // SDA=21, SCL=22

// MAX30105 sensor instance
MAX30105 particleSensor;

#define BTN_UP     18
#define BTN_DOWN   16
#define BTN_LEFT   17
#define BTN_RIGHT  4
#define BTN_CENTER 5

int currentScreen     = 0; 
const int totalScreens = 6;  // Reduced screen count (removed alarm control)

#define TOUCH_PIN1  32
#define TOUCH_PIN2  33
#define TOUCH_PIN3  14
#define TOUCH_PIN4  12
#define BUZZER_PIN  19

int threshold = 30;  
int touch1, touch2, touch3, touch4;

/****************** IoT Mode **********************/
#define AP_SSID       "BIOMEDICAL"
#define AP_PASSWORD   "12345678"
bool iotModeActive = false;

AsyncWebServer server(80);

/****************** Function Prototypes ***********/
void configureBuzzer();
void playTone(int frequency);
void stopTone();
void handleNavigation();
void updateDisplay();       
void updateDetailView();   
void updateHeartRateView();
void updateAlcoholView();
void updateSmokeView();
void updateMusicModeView();
void updateIoTModeScreen();
void showProfessionalBootScreen();
void drawProgressBar(int x, int y, int width, int height, int percentage);
void drawStatusIndicator(int x, int y, bool state);
void drawIcon(int x, int y, const char* icon);
uint8_t readHeartRate();
uint16_t readAlcoholLevel();  // Changed from uint8_t to uint16_t
String getAlcoholStatus();
float readTemperatureLM35();
uint16_t readSmokeLevel();    // Added missing prototype
String readSmokeStatus();
void setupWiFiAP();
void stopWiFiAP();
String buildJSONData();
bool initializeMAX30105();

// Variables for heart rate calculation
const byte RATE_ARRAY_SIZE = 4;
long rateArray[RATE_ARRAY_SIZE];
byte rateArrayIndex = 0;
long lastBeat = 0;
int beatsPerMinute = 0;
bool fingerDetected = false;

/*************************************************
 *        Professional Medical Dashboard HTML
 *************************************************/
const char dashboard_html[] PROGMEM = R"====(
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Biomedical Monitoring Dashboard</title>
    <style>
        :root {
            --primary-color: #DC143C;
            --secondary-color: #B22222;
            --accent-color: #FF6347;
            --danger-color: #8B0000;
            --success-color: #228B22;
            --warning-color: #FF4500;
            --dark-color: #2C3E50;
            --light-color: #FFF5F5;
            --text-color: #2C3E50;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
        }

        body {
            background: linear-gradient(135deg, #FFEBEE, #FFF5F5, #FFCDD2);
            color: var(--text-color);
            line-height: 1.6;
            min-height: 100vh;
        }

        .header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 20px;
            text-align: center;
            box-shadow: 0 4px 20px rgba(220, 20, 60, 0.3);
        }

        .header h1 {
            font-size: clamp(1.8rem, 4vw, 3rem);
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header .subtitle {
            font-size: clamp(1rem, 2vw, 1.2rem);
            opacity: 0.95;
        }

        .container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 0 15px;
        }

        .system-status {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-bottom: 25px;
        }

        .status-card {
            background: linear-gradient(145deg, white, var(--light-color));
            padding: 15px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(220, 20, 60, 0.15);
            border: 2px solid var(--accent-color);
            transition: transform 0.3s ease;
        }

        .status-card:hover {
            transform: translateY(-3px);
        }

        .status-value {
            font-size: clamp(1.2rem, 3vw, 1.6rem);
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 5px;
        }

        .status-label {
            font-size: clamp(0.8rem, 2vw, 0.9rem);
            color: var(--dark-color);
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }

        .card {
            background: linear-gradient(145deg, white, var(--light-color));
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 6px 25px rgba(220, 20, 60, 0.15);
            border: 2px solid var(--accent-color);
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(220, 20, 60, 0.2);
        }

        .card-title {
            font-size: clamp(1.2rem, 3vw, 1.4rem);
            font-weight: 700;
            margin-bottom: 20px;
            color: var(--primary-color);
            text-align: center;
            text-transform: uppercase;
            letter-spacing: 1px;
            border-bottom: 2px solid var(--accent-color);
            padding-bottom: 10px;
        }

        .sensor-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
        }

        .sensor-item {
            background: linear-gradient(145deg, #FFFAFA, #FFF5F5);
            padding: 15px;
            border-radius: 12px;
            text-align: center;
            border: 2px solid var(--accent-color);
            transition: all 0.3s ease;
            box-shadow: 0 3px 10px rgba(220, 20, 60, 0.1);
        }

        .sensor-item:hover {
            transform: scale(1.02);
            box-shadow: 0 5px 15px rgba(220, 20, 60, 0.2);
        }

        .sensor-label {
            font-size: clamp(0.8rem, 2vw, 0.9rem);
            font-weight: 600;
            color: var(--dark-color);
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 10px;
        }

        .sensor-value {
            font-size: clamp(1.4rem, 4vw, 1.8rem);
            font-weight: 700;
            color: var(--primary-color);
            margin: 10px 0;
        }

        .gauge-container {
            position: relative;
            width: 120px;
            height: 120px;
            margin: 10px auto;
        }

        .gauge-circle {
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: conic-gradient(
                from 0deg,
                var(--danger-color) 0%,
                var(--warning-color) 25%,
                var(--accent-color) 50%,
                var(--success-color) 75%,
                var(--primary-color) 100%
            );
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .gauge-circle::before {
            content: '';
            position: absolute;
            width: 90px;
            height: 90px;
            background: white;
            border-radius: 50%;
            box-shadow: inset 0 0 10px rgba(0,0,0,0.1);
        }

        .gauge-text {
            position: absolute;
            font-size: clamp(1rem, 3vw, 1.2rem);
            font-weight: 700;
            color: var(--primary-color);
            z-index: 10;
        }

        .alert {
            background: linear-gradient(145deg, var(--danger-color), #8B0000) !important;
            color: white !important;
            animation: alertPulse 1s infinite;
        }

        .safe {
            background: linear-gradient(145deg, var(--success-color), #228B22) !important;
            color: white !important;
        }

        .warning {
            background: linear-gradient(145deg, var(--warning-color), #FF4500) !important;
            color: white !important;
        }

        @keyframes alertPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .footer {
            background: linear-gradient(135deg, var(--dark-color), #34495E);
            color: white;
            text-align: center;
            padding: 20px;
            margin-top: 30px;
        }

        .footer h3 {
            font-size: clamp(1.2rem, 3vw, 1.4rem);
            margin-bottom: 5px;
        }

        .footer p {
            font-size: clamp(0.9rem, 2vw, 1rem);
        }

        /* Mobile Responsiveness */
        @media (max-width: 768px) {
            .container {
                padding: 0 10px;
            }
            
            .dashboard-grid {
                grid-template-columns: 1fr;
                gap: 15px;
            }
            
            .sensor-grid {
                grid-template-columns: 1fr;
            }
            
            .system-status {
                grid-template-columns: 1fr;
            }
            
            .gauge-container {
                width: 100px;
                height: 100px;
            }
            
            .gauge-circle::before {
                width: 80px;
                height: 80px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🏥 Biomedical Monitor</h1>
        <div class="subtitle">Patient Health Monitoring & Alert System</div>
    </div>
    
    <div class="container">
        <div class="system-status">
            <div class="status-card">
                <div class="status-value" id="systemTime">--:--:--</div>
                <div class="status-label">System Time</div>
            </div>
            <div class="status-card">
                <div class="status-value" id="connectionStatus">Connecting...</div>
                <div class="status-label">Connection</div>
            </div>
            <div class="status-card">
                <div class="status-value" id="lastUpdate">Never</div>
                <div class="status-label">Last Update</div>
            </div>
            <div class="status-card">
                <div class="status-value" id="deviceCount">0</div>
                <div class="status-label">Active Sensors</div>
            </div>
        </div>

        <div class="dashboard-grid">
            <div class="card">
                <h2 class="card-title">Vital Signs</h2>
                <div class="sensor-grid">
                    <div class="sensor-item">
                        <div class="sensor-label">Heart Rate</div>
                        <div class="gauge-container">
                            <div class="gauge-circle">
                                <div class="gauge-text" id="heartGauge">-- BPM</div>
                            </div>
                        </div>
                    </div>
                    <div class="sensor-item">
                        <div class="sensor-label">Temperature</div>
                        <div class="sensor-value" id="tempValue">--°C</div>
                    </div>
                </div>
            </div>

            <div class="card">
                <h2 class="card-title">Safety Sensors</h2>
                <div class="sensor-grid">
                    <div class="sensor-item" id="alcoholCard">
                        <div class="sensor-label">Alcohol Level</div>
                        <div class="sensor-value" id="alcoholValue">--</div>
                        <div style="font-size: 0.9em; margin-top: 5px;" id="alcoholStatus">--</div>
                    </div>
                    <div class="sensor-item" id="smokeCard">
                        <div class="sensor-label">Smoke Detection</div>
                        <div class="sensor-value" id="smokeValue">--</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="footer">
        <h3>Biomedical Monitoring System</h3>
        <p>Advanced Health Monitoring & Safety &copy; 2024</p>
    </div>

    <script>
        let isConnected = false;
        let updateCount = 0;

        function updateTime() {
            const now = new Date();
            document.getElementById('systemTime').textContent = now.toLocaleTimeString();
        }

        function updateSensorCard(id, status) {
            const card = document.getElementById(id);
            if (!card) return;
            
            card.classList.remove('alert', 'safe', 'warning');
            
            if (status === "High" || status === "Detected" || status === "Critical") {
                card.classList.add('alert');
            } else if (status === "Normal" || status === "Safe" || status === "Clear") {
                card.classList.add('safe');
            } else if (status === "Warning" || status === "Low") {
                card.classList.add('warning');
            }
        }

        function updateData() {
            fetch('/data')
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    console.log('Received data:', data);
                    updateCount++;
                    
                    // Update vital signs
                    const heartRate = data.heartRate || 0;
                    const temp = data.temperature || 0;
                    
                    document.getElementById("heartGauge").textContent = heartRate + " BPM";
                    document.getElementById("tempValue").textContent = temp + "°C";
                    
                    // Update safety sensors
                    document.getElementById("alcoholValue").textContent = data.alcoholLevel || "--";
                    document.getElementById("alcoholStatus").textContent = data.alcoholStatus || "--";
                    document.getElementById("smokeValue").textContent = data.smoke || "--";
                    
                    // Update sensor card styles
                    updateSensorCard("alcoholCard", data.alcoholStatus);
                    updateSensorCard("smokeCard", data.smoke);
                    
                    // Update connection status
                    document.getElementById('connectionStatus').textContent = 'Connected';
                    document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();
                    document.getElementById('deviceCount').textContent = updateCount;
                    isConnected = true;
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                    document.getElementById('connectionStatus').textContent = 'Error';
                    isConnected = false;
                });
        }

        // Initialize
        updateTime();
        
        // Initial data fetch
        setTimeout(updateData, 1000);
        
        // Auto-update intervals
        setInterval(updateTime, 1000);
        setInterval(updateData, 3000);
    </script>
</body>
</html>
)====";

/*************************************************
 *   JSON Data Builder - Updated with live alcohol values
 *************************************************/
String buildJSONData() {
  uint8_t heartRate = readHeartRate();
  float temperature = readTemperatureLM35();
  uint16_t alcoholLevel = readAlcoholLevel();
  String alcoholStatus = getAlcoholStatus();
  uint16_t smokeLevel = readSmokeLevel();
  String smokeStatus = readSmokeStatus();

  // Handle temperature - ensure valid range
  int tempDisplay = 0;
  if (!isnan(temperature)) {
    tempDisplay = constrain((int)temperature, 20, 50);
  }

  String json = "{";
  json += "\"heartRate\":" + String(heartRate) + ",";
  json += "\"temperature\":" + String(tempDisplay) + ",";
  json += "\"alcoholLevel\":" + String(alcoholLevel) + ",";
  json += "\"alcoholStatus\":\"" + alcoholStatus + "\",";
  json += "\"smokeLevel\":" + String(smokeLevel) + ",";
  json += "\"smoke\":\"" + smokeStatus + "\"";
  json += "}";

  Serial.println("JSON Output: " + json);
  return json;
}

/*************************************************
 *        Setup & Main Loop
 *************************************************/
void setup() {
  Serial.begin(115200);
  Wire.begin(21, 22);
  Wire.setClock(400000);

  // Initialize U8g2
  u8g2.begin();
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_6x10_tr);
  u8g2.sendBuffer();

  showProfessionalBootScreen();

  // Initialize MAX30105 sensor
  if (!initializeMAX30105()) {
    Serial.println("MAX30105 not found. Check wiring!");
  }

  pinMode(BTN_UP,     INPUT_PULLUP);
  pinMode(BTN_DOWN,   INPUT_PULLUP);
  pinMode(BTN_LEFT,   INPUT_PULLUP);
  pinMode(BTN_RIGHT,  INPUT_PULLUP);
  pinMode(BTN_CENTER, INPUT_PULLUP);

  touchAttachInterrupt(TOUCH_PIN1, NULL, threshold);
  touchAttachInterrupt(TOUCH_PIN2, NULL, threshold);
  touchAttachInterrupt(TOUCH_PIN3, NULL, threshold);
  touchAttachInterrupt(TOUCH_PIN4, NULL, threshold);

  configureBuzzer();
  updateDisplay();

  setupWiFiAP();

  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", dashboard_html);
  });

  server.on("/data", HTTP_GET, [](AsyncWebServerRequest *request){
    String json = buildJSONData();
    request->send(200, "application/json", json);
  });

  server.begin();
  Serial.println("Biomedical Monitoring System Ready.");
}

void loop() {
  handleNavigation();

  switch (currentScreen) {
    case 0:  
      updateDisplay();
      break;
    case 1: case 2: case 3:
      updateDetailView();
      break;
    case 4:
      updateHeartRateView();
      break;
    case 5:
      updateAlcoholView();
      break;
    case 6:
      updateSmokeView();
      break;
    case 7:
      updateMusicModeView();
      break;
    case 8:
      updateIoTModeScreen();
      break;
    default:
      currentScreen = 0;
      updateDisplay();
      break;
  }
}

/*************************************************
 *        Navigation Handler
 *************************************************/
void handleNavigation() {
  if (currentScreen != 7 && currentScreen != 8) {
    if (digitalRead(BTN_UP) == LOW) {
      currentScreen = (currentScreen - 1 + 7) % 7;
      delay(200); 
    }
    if (digitalRead(BTN_DOWN) == LOW) {
      currentScreen = (currentScreen + 1) % 7;
      delay(200); 
    }
  }

  // Music Mode - LEFT to enter, RIGHT to exit
  if (currentScreen == 0 && digitalRead(BTN_LEFT) == LOW) {
    currentScreen = 7;
    delay(200);
  }
  if (currentScreen == 7 && digitalRead(BTN_RIGHT) == LOW) {
    currentScreen = 0;
    delay(200);
  }

  // IoT Mode - RIGHT to enter, LEFT to exit  
  if (currentScreen == 0 && digitalRead(BTN_RIGHT) == LOW && !iotModeActive) {
    iotModeActive = true;
    currentScreen = 8;
    delay(200);
  }
  if (currentScreen == 8 && digitalRead(BTN_LEFT) == LOW) {
    stopWiFiAP();
    iotModeActive = false;
    currentScreen = 0;
    delay(200);
  }
}

/*************************************************
 *        Enhanced Professional Boot Screen
 *************************************************/
void showProfessionalBootScreen() {
  // Phase 1: Animated Logo with better effects
  for (int frame = 0; frame < 25; frame++) {
    u8g2.clearBuffer();
    
    // Animated border with pulsing effect
    if (frame > 3) {
      int borderSize = 2 + (frame % 4);
      u8g2.drawRFrame(10, 8, 108, 48, 5);
      if (frame > 8) {
        u8g2.drawRFrame(12, 10, 104, 44, 3);
      }
    }
    
    // Company name with sliding animation
    if (frame > 6) {
      u8g2.setFont(u8g2_font_ncenB14_tr);
      int textX = max(20, 150 - frame * 8);
      u8g2.drawStr(textX, 32, "BIOMEDICAL");
    }
    
    // Version info with fade-in effect
    if (frame > 15) {
      u8g2.setFont(u8g2_font_6x10_tr);
      u8g2.drawStr(35, 45, "MONITOR");
    }
    
    // Loading dots animation
    if (frame > 10) {
      for (int i = 0; i < 3; i++) {
        if ((frame + i * 3) % 9 < 6) {
          u8g2.drawDisc(45 + i * 10, 50, 1);
        }
      }
    }
    
    u8g2.sendBuffer();
    delay(80);
  }
  
  // Phase 2: Enhanced Loading sequence
  const char* loadSteps[] = {
    "Initializing System...",
    "Loading Sensors...", 
    "Configuring Health...",
    "Starting Monitor...",
    "System Ready!"
  };
  
  for (int step = 0; step < 5; step++) {
    u8g2.clearBuffer();
    
    // Centered header
    u8g2.setFont(u8g2_font_ncenB10_tr);
    u8g2.drawStr(25, 15, "BIOMEDICAL");
    
    // Loading text - centered
    u8g2.setFont(u8g2_font_6x10_tr);
    int textWidth = strlen(loadSteps[step]) * 6;
    int textX = (128 - textWidth) / 2;
    u8g2.drawStr(textX, 32, loadSteps[step]);
    
    // Enhanced progress bar with animation
    int progress = ((step + 1) * 100) / 5;
    u8g2.drawRFrame(14, 42, 100, 10, 2);
    u8g2.drawBox(16, 44, (progress * 96) / 100, 6);
    
    // Animated progress indicator
    int indicatorX = 16 + (progress * 96) / 100;
    if (step < 4) {
      u8g2.drawDisc(indicatorX, 47, 2);
    }
    
    // Centered percentage
    u8g2.setCursor(58, 60);
    u8g2.print(progress);
    u8g2.print("%");
    
    u8g2.sendBuffer();
    delay(700);
  }
  
  delay(500);
}

/*************************************************
 *        Improved Main Display with Live Alcohol Values
 *************************************************/
void updateDisplay() {
  uint8_t heartRate = readHeartRate();
  float temperature = readTemperatureLM35();
  uint16_t alcoholLevel = readAlcoholLevel();
  String alcoholStatus = getAlcoholStatus();
  uint16_t smokeLevel = readSmokeLevel();
  String smokeStatus = readSmokeStatus();

  // Buzzer alerts for biomedical sensors
  static unsigned long lastBuzzerTime = 0;
  unsigned long currentTime = millis();
  
  if (currentTime - lastBuzzerTime > 2000) { // Check every 2 seconds
    if (alcoholLevel > 600) { // High or Critical alcohol
      // High alcohol - 3 urgent beeps
      tone(BUZZER_PIN, 2000, 200);
      delay(250);
      tone(BUZZER_PIN, 2000, 200);
      delay(250);
      tone(BUZZER_PIN, 2000, 200);
      lastBuzzerTime = currentTime;
    } else if (smokeLevel > 600) { // Critical or High smoke
      // Smoke detected - continuous urgent beeping
      tone(BUZZER_PIN, 2500, 300);
      delay(100);
      tone(BUZZER_PIN, 2500, 300);
      delay(100);
      tone(BUZZER_PIN, 2500, 300);
      lastBuzzerTime = currentTime;
    } else if ((heartRate > 100 || heartRate < 60) && fingerDetected && heartRate > 0) {
      // Abnormal heart rate - 2 medium beeps (only if finger detected and valid reading)
      tone(BUZZER_PIN, 1500, 150);
      delay(200);
      tone(BUZZER_PIN, 1500, 150);
      lastBuzzerTime = currentTime;
    }
  }

  u8g2.clearBuffer();

  // Biomedical sensors grid - adjusted positioning to fix white line
  // Heart Rate - Top Left with finger detection indicator
  u8g2.drawRFrame(2, 2, 60, 30, 2);
  u8g2.setFont(u8g2_font_5x7_tr);
  u8g2.drawStr(5, 9, "HEART");
  u8g2.setFont(u8g2_font_6x10_tr);
  String heartStr;
  if (fingerDetected && heartRate > 0) {
    heartStr = String(heartRate) + "BPM";
  } else if (fingerDetected) {
    heartStr = "READING...";
  } else {
    heartStr = "NO FINGER";
  }
  int heartX = 5 + (52 - heartStr.length() * 6) / 2;
  u8g2.drawStr(heartX, 18, heartStr.c_str());
  
  // Add finger detection indicator
  if (fingerDetected) {
    u8g2.drawDisc(57, 6, 2); // Green dot when finger detected
    u8g2.setFont(u8g2_font_micro_tr);
    u8g2.drawStr(7, 29, "DETECTED");
  } else {
    u8g2.setFont(u8g2_font_micro_tr);
    u8g2.drawStr(11, 29, "PLACE FINGER");
  }
  
  // Temperature - Top Right with bar indicator
  u8g2.drawRFrame(66, 2, 58, 30, 2);
  u8g2.setFont(u8g2_font_5x7_tr);
  u8g2.drawStr(69, 9, "TEMP");
  u8g2.setFont(u8g2_font_6x10_tr);
  String tempStr = String(temperature, 1) + "C";
  int tempX = 69 + (52 - tempStr.length() * 6) / 2;
  u8g2.drawStr(tempX, 18, tempStr.c_str());
  
  // Temperature bar
  int tempBarLen = map((int)temperature, 35, 42, 0, 50);
  tempBarLen = constrain(tempBarLen, 0, 50);
  u8g2.drawFrame(69, 25, 50, 4);
  if (tempBarLen > 0) {
    u8g2.drawBox(70, 26, tempBarLen, 2);
  }
  
  // Alcohol - Bottom Left with live values
  u8g2.drawRFrame(2, 35, 60, 19, 2);
  u8g2.setFont(u8g2_font_5x7_tr);
  u8g2.drawStr(5, 42, "ALC");
  u8g2.setFont(u8g2_font_micro_tr);
  
  // Display alcohol level value
  String alcoholLevelStr = String(alcoholLevel);
  int alcoholLevelX = 5 + (52 - alcoholLevelStr.length() * 4) / 2;
  u8g2.drawStr(alcoholLevelX, 48, alcoholLevelStr.c_str());
  
  // Display alcohol status
  u8g2.setFont(u8g2_font_micro_tr);
  String alcoholDisplayShort = alcoholStatus;
  if (alcoholStatus == "Critical") alcoholDisplayShort = "CRIT";
  else if (alcoholStatus == "Medium") alcoholDisplayShort = "MED";
  else if (alcoholStatus == "Normal") alcoholDisplayShort = "NORM";
  
  int alcoholX = 5 + (52 - alcoholDisplayShort.length() * 4) / 2;
  u8g2.drawStr(alcoholX, 53, alcoholDisplayShort.c_str());

  // Smoke - Bottom Right with live values
  u8g2.drawRFrame(66, 35, 60, 19, 2);
  u8g2.setFont(u8g2_font_5x7_tr);
  u8g2.drawStr(69, 42, "SMOKE");
  u8g2.setFont(u8g2_font_micro_tr);
  
  // Display smoke level value
  String smokeLevelStr = String(smokeLevel);
  int smokeLevelX = 69 + (52 - smokeLevelStr.length() * 4) / 2;
  u8g2.drawStr(smokeLevelX, 48, smokeLevelStr.c_str());
  
  // Display smoke status
  u8g2.setFont(u8g2_font_micro_tr);
  String smokeDisplayShort = smokeStatus;
  if (smokeStatus == "Critical") smokeDisplayShort = "CRIT";
  else if (smokeStatus == "Medium") smokeDisplayShort = "MED";
  
  int smokeX = 69 + (52 - smokeDisplayShort.length() * 4) / 2;
  u8g2.drawStr(smokeX, 53, smokeDisplayShort.c_str());
  
  // Navigation bar
  u8g2.drawHLine(0, 56, 126);
  u8g2.setFont(u8g2_font_micro_tr);
  u8g2.drawStr(5, 63, "UP:DET L:MUS R:IoT");
  
  // Enhanced alert overlay
  if (alcoholLevel > 600 || smokeLevel > 600) {
    if ((millis() / 400) % 2) {
      u8g2.drawRBox(8, 6, 112, 20, 4);
      u8g2.setColorIndex(0);
      u8g2.setFont(u8g2_font_7x13B_tr);
      
      String alertText;
      if (alcoholLevel > 800) alertText = "ALC CRIT!";
      else if (alcoholLevel > 600) alertText = "ALC HIGH!";
      else if (smokeLevel > 800) alertText = "SMOKE CRIT!";
      else alertText = "SMOKE HIGH!";
      
      int alertX = 12 + (104 - alertText.length() * 7) / 2;
      u8g2.drawStr(alertX, 18, alertText.c_str());
      u8g2.setColorIndex(1);
      
      u8g2.drawDisc(13, 13, 2);
      u8g2.drawDisc(115, 13, 2);
    }
  }
  
  u8g2.sendBuffer();
}

/*************************************************
 *        MAX30105 Initialization
 *************************************************/
bool initializeMAX30105() {
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) {
    Serial.println("MAX30105 was not found. Please check wiring/power.");
    return false;
  }
  
  // Configure sensor settings for better heart rate detection
  particleSensor.setup(60, 4, 2, 100, 411, 4096); // Configure sensor
  
  // Set LED brightness for better detection
  particleSensor.setPulseAmplitudeRed(50);    // Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0);   // Turn off Green LED
  
  // Initialize rate array
  for (byte i = 0; i < RATE_ARRAY_SIZE; i++) {
    rateArray[i] = 0;
  }
  
  Serial.println("MAX30105 sensor initialized successfully.");
  return true;
}

/*************************************************
 *            Enhanced Heart Rate Reading Function
 *************************************************/
uint8_t readHeartRate() {
  long irValue = particleSensor.getIR();
  
  // Debug output
  Serial.print("IR Value: ");
  Serial.println(irValue);
  
  // Check if finger is detected (threshold adjusted for better detection)
  if (irValue > 50000) { // Finger is detected
    fingerDetected = true;
    
    if (checkForBeat(irValue)) {
      // Calculate time between beats
      long delta = millis() - lastBeat;
      lastBeat = millis();
      
      Serial.print("Delta: ");
      Serial.println(delta);
      
      // Calculate BPM only if delta is reasonable (300-1500ms = 40-200 BPM)
      if (delta > 300 && delta < 1500) {
        // Store valid reading in array
        int currentBPM = 60 / (delta / 1000.0);
        rateArray[rateArrayIndex++] = currentBPM;
        rateArrayIndex %= RATE_ARRAY_SIZE;
        
        // Calculate average of readings
        long total = 0;
        int validReadings = 0;
        for (byte i = 0; i < RATE_ARRAY_SIZE; i++) {
          if (rateArray[i] > 0) {
            total += rateArray[i];
            validReadings++;
          }
        }
        
        if (validReadings > 0) {
          beatsPerMinute = total / validReadings;
          Serial.print("Calculated BPM: ");
          Serial.println(beatsPerMinute);
        }
      }
    }
  } else {
    // No finger detected
    fingerDetected = false;
    // Don't reset beatsPerMinute immediately, wait for timeout
    if (millis() - lastBeat > 10000) { // 10 second timeout
      beatsPerMinute = 0;
      // Clear rate array
      for (byte i = 0; i < RATE_ARRAY_SIZE; i++) {
        rateArray[i] = 0;
      }
    }
  }
  
  // Return current BPM or 0 if no finger detected
  if (fingerDetected && beatsPerMinute > 0) {
    return constrain(beatsPerMinute, 40, 200);
  } else {
    return 0; // Return 0 when no finger detected
  }
}

/*************************************************
 *            Enhanced Alcohol Reading Functions
 *************************************************/
uint16_t readAlcoholLevel() {
  Wire.requestFrom(ALCOHOL_SENSOR_ADDRESS, 2);
  if (Wire.available() >= 2) {
    uint8_t high = Wire.read();
    uint8_t low = Wire.read();
    uint16_t alcoholLevel = (high << 8) | low;
    
    Serial.print("Alcohol Level: ");
    Serial.println(alcoholLevel);
    
    return alcoholLevel;
  }
  return 0;
}

String getAlcoholStatus() {
  uint16_t level = readAlcoholLevel();
  
  // Define thresholds for alcohol detection
  if (level > 800) return "Critical";
  else if (level > 600) return "High";
  else if (level > 400) return "Medium";
  else if (level > 200) return "Low";
  else return "Normal";
}

/*************************************************
 *            Enhanced Temperature Reading Function
 *************************************************/
float readTemperatureLM35() {
  // Begin transmission to ATtiny handling LM35
  Wire.beginTransmission(TEMPERATURE_SENSOR_ADDRESS);
  Wire.endTransmission();
  
  // Request 2 bytes from ATtiny
  Wire.requestFrom(TEMPERATURE_SENSOR_ADDRESS, 2);
  
  if (Wire.available() >= 2) {
    // Read high and low bytes
    uint16_t raw = (Wire.read() << 8) | Wire.read();
    
    // Convert back to float (ATtiny sends temp * 10)
    float temperature = raw / 10.0;
    
    Serial.print("Temperature from ATtiny: ");
    Serial.print(temperature);
    Serial.println(" C");
    
    // Return temperature if reasonable, otherwise return default
    if (temperature >= 15.0 && temperature <= 50.0) {
      return temperature;
    } else {
      Serial.println("Temperature out of range, using default");
      return 37.0; // Default body temperature
    }
  } else {
    Serial.println("Failed to read temperature from ATtiny");
    return 37.0; // Default body temperature
  }
}

/*************************************************
 *            Enhanced Smoke Reading Functions
 *************************************************/
uint16_t readSmokeLevel() {
  Wire.requestFrom(SMOKE_SENSOR_ADDRESS, 2);
  if (Wire.available() >= 2) {
    uint8_t high = Wire.read();
    uint8_t low = Wire.read();
    uint16_t smokeLevel = (high << 8) | low;
    
    Serial.print("Smoke Level: ");
    Serial.println(smokeLevel);
    
    return smokeLevel;
  }
  return 0;
}

String readSmokeStatus() {
  uint16_t smokeLevel = readSmokeLevel();
  
  // Define thresholds for smoke detection
  if (smokeLevel > 800) return "Critical";
  else if (smokeLevel > 600) return "High";
  else if (smokeLevel > 400) return "Medium";
  else if (smokeLevel > 200) return "Low";
  else return "Clear";
}

/*************************************************
 *        Updated Heart Rate Detail View
 *************************************************/
void updateDetailView() {
  static unsigned long lastDetailBuzzerTime = 0;
  unsigned long currentTime = millis();
  
  u8g2.clearBuffer();

  switch (currentScreen) {
    case 1: { // Heart Rate Detail
      uint8_t heartRate = readHeartRate();
      
      // Buzzer alert for abnormal heart rate (only if finger detected and valid reading)
      if (currentTime - lastDetailBuzzerTime > 3000 && (heartRate > 100 || heartRate < 60) && fingerDetected && heartRate > 0) {
        tone(BUZZER_PIN, 1500, 150);
        delay(200);
        tone(BUZZER_PIN, 1500, 150);
        lastDetailBuzzerTime = currentTime;
      }
      
      u8g2.drawBox(0, 0, 128, 12);
      u8g2.setColorIndex(0);
      u8g2.setFont(u8g2_font_7x13B_tr);
      u8g2.drawStr(25, 9, "HEART RATE");
      u8g2.setColorIndex(1);
      
      u8g2.drawRFrame(15, 16, 98, 30, 4);
      
      if (fingerDetected) {
        if (heartRate > 0) {
          u8g2.setFont(u8g2_font_ncenB10_tr);
          String heartText = String(heartRate) + " BPM";
          int heartX = 19 + (90 - heartText.length() * 10) / 2;
          u8g2.drawStr(heartX, 32, heartText.c_str());
          
          // Animated heartbeat
          if ((millis() / 500) % 2) {
            for (int i = 0; i < 3; i++) {
              u8g2.drawPixel(80 + i * 4, 20 + i % 2);
              u8g2.drawPixel(80 + i * 4, 21 + i % 2);
            }
          }
          
          u8g2.setFont(u8g2_font_6x10_tr);
          String status = "Status: ";
          if (heartRate < 60) status += "LOW";
          else if (heartRate > 100) status += "HIGH";
          else status += "NORMAL";
          
          int statusX = (128 - status.length() * 6) / 2;
          u8g2.drawStr(statusX, 55, status.c_str());
        } else {
          u8g2.setFont(u8g2_font_6x10_tr);
          String readingText = "READING...";
          String waitText = "PLEASE WAIT";
          
          int readingX = 19 + (90 - readingText.length() * 6) / 2;
          int waitX = 19 + (90 - waitText.length() * 6) / 2;
          
          u8g2.drawStr(readingX, 28, readingText.c_str());
          u8g2.drawStr(waitX, 38, waitText.c_str());
          
          // Blinking indicator
          if ((millis() / 300) % 2) {
            u8g2.drawDisc(64, 55, 3);
          }
        }
      } else {
        u8g2.setFont(u8g2_font_6x10_tr);
        String noFingerText = "PLACE FINGER";
        String onSensorText = "ON SENSOR";
        
        int noFingerX = 19 + (90 - noFingerText.length() * 6) / 2;
        int onSensorX = 19 + (90 - onSensorText.length() * 6) / 2;
        
        u8g2.drawStr(noFingerX, 28, noFingerText.c_str());
        u8g2.drawStr(onSensorX, 38, onSensorText.c_str());
        
        // Blinking indicator
        if ((millis() / 500) % 2) {
          u8g2.drawDisc(64, 55, 3);
        }
      }
      
      break;
    }
    
    case 2: { // Temperature Detail
      float temperature = readTemperatureLM35();
      
      u8g2.drawBox(0, 0, 128, 12);
      u8g2.setColorIndex(0);
      u8g2.setFont(u8g2_font_7x13B_tr);
      u8g2.drawStr(20, 9, "TEMPERATURE");
      u8g2.setColorIndex(1);
      
      u8g2.drawRFrame(20, 16, 88, 30, 4);
      
      if (!isnan(temperature)) {
        u8g2.setFont(u8g2_font_ncenB14_tr);
        String tempText = String(temperature, 1) + "C";
        int textWidth = tempText.length() * 10;
        int tempX = 20 + (88 - textWidth) / 2;
        u8g2.drawStr(tempX, 35, tempText.c_str());
      } else {
        u8g2.setFont(u8g2_font_7x13B_tr);
        u8g2.drawStr(50, 32, "ERROR");
      }
      
      u8g2.setFont(u8g2_font_6x10_tr);
      String status = "Status: ";
      if (temperature < 36.1) status += "LOW";
      else if (temperature < 37.2) status += "NORMAL";
      else if (temperature < 38.0) status += "MILD FEVER";
      else status += "HIGH FEVER";
      
      int statusX = (128 - status.length() * 6) / 2;
      u8g2.drawStr(statusX, 55, status.c_str());
      
      break;
    }
    
    case 3: { // Alcohol Detail
      uint16_t alcoholLevel = readAlcoholLevel();
      String alcoholStatus = getAlcoholStatus();
      
      u8g2.drawBox(0, 0, 128, 12);
      u8g2.setColorIndex(0);
      u8g2.setFont(u8g2_font_7x13B_tr);
      u8g2.drawStr(20, 9, "ALCOHOL LEVEL");
      u8g2.setColorIndex(1);
      
      u8g2.drawRFrame(20, 16, 88, 30, 4);
      
      u8g2.setFont(u8g2_font_ncenB10_tr);
      String alcoholText = alcoholStatus;
      int alcoholX = 24 + (80 - alcoholText.length() * 10) / 2;
      u8g2.drawStr(alcoholX, 30, alcoholText.c_str());
      
      u8g2.setFont(u8g2_font_6x10_tr);
      String levelText = "Level: " + String(alcoholLevel);
      int levelX = 24 + (80 - levelText.length() * 6) / 2;
      u8g2.drawStr(levelX, 40, levelText.c_str());
      
      break;
    }
  }

  u8g2.setFont(u8g2_font_micro_tr);
  u8g2.drawStr(40, 63, "UP/DOWN:NAV");

  u8g2.sendBuffer();
}

/*************************************************
 *        Enhanced Music Mode with Better Piano Animation
 *************************************************/
void updateMusicModeView() {
  u8g2.clearBuffer();
  
  // Centered header
  u8g2.drawBox(0, 0, 128, 12);
  u8g2.setColorIndex(0);
  u8g2.setFont(u8g2_font_7x13B_tr);
  u8g2.drawStr(20, 9, "TOUCH PIANO");
  u8g2.setColorIndex(1);
  
  touch1 = touchRead(TOUCH_PIN1);
  touch2 = touchRead(TOUCH_PIN2);
  touch3 = touchRead(TOUCH_PIN3);
  touch4 = touchRead(TOUCH_PIN4);
  
  const char* notes[] = {"A", "B", "C", "D"};
  const int frequencies[] = {262, 294, 330, 349};
  
  bool anyPressed = false;
  
  // Centered piano keys
  int startX = (128 - (4 * 26 - 2)) / 2;
  
  for (int i = 0; i < 4; i++) {
    bool pressed = false;
    switch (i) {
      case 0: pressed = (touch1 < threshold); break;
      case 1: pressed = (touch2 < threshold); break;
      case 2: pressed = (touch3 < threshold); break;
      case 3: pressed = (touch4 < threshold); break;
    }
    
    int keyX = startX + i * 26;
    int keyY = 20;
    int keyW = 24;
    int keyH = 28;
    
    if (pressed) {
      // Pressed key animation
      u8g2.drawRBox(keyX, keyY, keyW, keyH, 3);
      u8g2.setColorIndex(0);
      u8g2.setFont(u8g2_font_ncenB14_tr);
      u8g2.drawStr(keyX + 8, keyY + 18, notes[i]);
      u8g2.setColorIndex(1);
      
      // Musical note animation floating up
      for (int j = 0; j < 3; j++) {
        int noteY = 15 - (millis() / 100 + j * 5) % 10;
        if (noteY > 5) {
          u8g2.drawPixel(keyX + 12 + j * 2, noteY);
          u8g2.drawPixel(keyX + 12 + j * 2 + 1, noteY);
        }
      }
      
      playTone(frequencies[i]);
      anyPressed = true;
    } else {
      // Normal key
      u8g2.drawRFrame(keyX, keyY, keyW, keyH, 3);
      u8g2.setFont(u8g2_font_ncenB10_tr);
      u8g2.drawStr(keyX + 9, keyY + 16, notes[i]);
    }
  }
  
  if (!anyPressed) {
    stopTone();
  }
  
  // Centered exit instruction
  u8g2.setFont(u8g2_font_micro_tr);
  u8g2.drawStr(75, 63, "RIGHT: EXIT");
  
  u8g2.sendBuffer();
}

/*************************************************
 *          Audio Functions
 *************************************************/
void configureBuzzer() {
  pinMode(BUZZER_PIN, OUTPUT); 
  digitalWrite(BUZZER_PIN, LOW);
}

void playTone(int frequency) {
  tone(BUZZER_PIN, frequency, 500);
}

void stopTone() {
  noTone(BUZZER_PIN);
}

/*************************************************
 *        WiFi Functions
 *************************************************/
void setupWiFiAP() {
  WiFi.softAP(AP_SSID, AP_PASSWORD);
  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);
}

void stopWiFiAP() {
  WiFi.softAPdisconnect(true);
  WiFi.mode(WIFI_OFF);
}

/*************************************************
 *        Updated Heart Rate View
 *************************************************/
void updateHeartRateView() {
  uint8_t heartRate = readHeartRate();
  
  static unsigned long lastHeartBuzzerTime = 0;
  unsigned long currentTime = millis();
  
  if (currentTime - lastHeartBuzzerTime > 3000 && (heartRate > 100 || heartRate < 60) && fingerDetected && heartRate > 0) {
    tone(BUZZER_PIN, 1500, 150);
    delay(200);
    tone(BUZZER_PIN, 1500, 150);
    lastHeartBuzzerTime = currentTime;
  }
  
  u8g2.clearBuffer();
  
  u8g2.drawBox(0, 0, 128, 12);
  u8g2.setColorIndex(0);
  u8g2.setFont(u8g2_font_7x13B_tr);
  u8g2.drawStr(15, 9, "HEART MONITOR");
  u8g2.setColorIndex(1);
  
  if (fingerDetected) {
    if (heartRate > 0) {
      // Heart rate display
      u8g2.drawRFrame(25, 16, 78, 28, 4);
      u8g2.setFont(u8g2_font_6x10_tr);
      u8g2.drawStr(45, 25, "HEART RATE");
      u8g2.setFont(u8g2_font_ncenB14_tr);
      String heartText = String(heartRate) + " BPM";
      int heartX = 29 + (70 - heartText.length() * 14) / 2;
      u8g2.drawStr(heartX, 38, heartText.c_str());
      
      // Animated heartbeat line
      if ((millis() / 300) % 2) {
        for (int i = 0; i < 6; i++) {
          int beatY = 50 + sin((millis() / 100.0) + i) * 2;
          u8g2.drawPixel(20 + i * 15, beatY);
          u8g2.drawPixel(21 + i * 15, beatY);
        }
      }
      
      u8g2.setFont(u8g2_font_6x10_tr);
      String status = (heartRate < 60 || heartRate > 100) ? "ABNORMAL" : "NORMAL";
      int statusX = (128 - status.length() * 6) / 2;
      u8g2.drawStr(statusX, 62, status.c_str());
    } else {
      // Reading in progress
      u8g2.drawRFrame(25, 20, 78, 24, 4);
      u8g2.setFont(u8g2_font_6x10_tr);
      String readingText = "READING...";
      String waitText = "PLEASE WAIT";
      
      int readingX = 29 + (70 - readingText.length() * 6) / 2;
      int waitX = 29 + (70 - waitText.length() * 6) / 2;
      
      u8g2.drawStr(readingX, 30, readingText.c_str());
      u8g2.drawStr(waitX, 38, waitText.c_str());
      
      // Blinking indicator
      if ((millis() / 300) % 2) {
        u8g2.drawDisc(64, 55, 3);
      }
    }
  } else {
    // No finger detected
    u8g2.drawRFrame(25, 20, 78, 24, 4);
    u8g2.setFont(u8g2_font_6x10_tr);
    String noFingerText = "PLACE FINGER";
    String onSensorText = "ON SENSOR";
    
    int noFingerX = 29 + (70 - noFingerText.length() * 6) / 2;
    int onSensorX = 29 + (70 - onSensorText.length() * 6) / 2;
    
    u8g2.drawStr(noFingerX, 30, noFingerText.c_str());
    u8g2.drawStr(onSensorX, 38, onSensorText.c_str());
    
    // Blinking indicator
    if ((millis() / 500) % 2) {
      u8g2.drawDisc(64, 55, 3);
    }
  }
  
  u8g2.sendBuffer();
}

/*************************************************
 *        Enhanced Alcohol View
 *************************************************/
void updateAlcoholView() {
  uint16_t alcoholLevel = readAlcoholLevel();
  String alcoholStatus = getAlcoholStatus();
  
  static unsigned long lastAlcoholBuzzerTime = 0;
  unsigned long currentTime = millis();
  
  if (currentTime - lastAlcoholBuzzerTime > 3000 && alcoholLevel > 600) {
    tone(BUZZER_PIN, 2000, 200);
    delay(250);
    tone(BUZZER_PIN, 2000, 200);
    delay(250);
    tone(BUZZER_PIN, 2000, 200);
    lastAlcoholBuzzerTime = currentTime;
  }
  
  u8g2.clearBuffer();
  
  u8g2.drawBox(0, 0, 128, 12);
  u8g2.setColorIndex(0);
  u8g2.setFont(u8g2_font_7x13B_tr);
  u8g2.drawStr(15, 9, "ALCOHOL SENSOR");
  u8g2.setColorIndex(1);
  
  if (alcoholLevel > 600) { // High or Critical
    if ((millis() / 150) % 2) {
      u8g2.drawRFrame(10, 14, 108, 32, 4);
      u8g2.drawRFrame(12, 16, 104, 28, 2);
    }
    
    u8g2.setFont(u8g2_font_ncenB10_tr);
    String alcoholText = alcoholStatus;
    alcoholText.toUpperCase();
    int alcoholX = (128 - alcoholText.length() * 10) / 2;
    u8g2.drawStr(alcoholX, 25, alcoholText.c_str());
    
    u8g2.setFont(u8g2_font_6x10_tr);
    String levelText = "Level: " + String(alcoholLevel);
    int levelX = (128 - levelText.length() * 6) / 2;
    u8g2.drawStr(levelX, 35, levelText.c_str());
    
    String warningText = "WARNING!";
    int warningX = (128 - warningText.length() * 6) / 2;
    u8g2.drawStr(warningX, 55, warningText.c_str());
    
  } else {
    u8g2.drawRFrame(15, 16, 98, 36, 4);
    
    u8g2.setFont(u8g2_font_6x10_tr);
    String statusText = "Status: " + alcoholStatus;
    int statusX = 19 + (90 - statusText.length() * 6) / 2;
    u8g2.drawStr(statusX, 25, statusText.c_str());
    
    u8g2.setFont(u8g2_font_ncenB10_tr);
    String levelText = String(alcoholLevel);
    int levelX = 19 + (90 - levelText.length() * 10) / 2;
    u8g2.drawStr(levelX, 38, levelText.c_str());
    
    // Alcohol level bar
    u8g2.drawFrame(19, 42, 90, 6);
    int barWidth = map(alcoholLevel, 0, 1000, 0, 88);
    barWidth = constrain(barWidth, 0, 88);
    if (barWidth > 0) {
      u8g2.drawBox(20, 43, barWidth, 4);
    }
    
    String safeText = "Safe Level";
    int safeX = (128 - safeText.length() * 6) / 2;
    u8g2.setFont(u8g2_font_6x10_tr);
    u8g2.drawStr(safeX, 62, safeText.c_str());
  }
  
  u8g2.sendBuffer();
}

/*************************************************
 *        Smoke View
 *************************************************/
void updateSmokeView() {
  uint16_t smokeLevel = readSmokeLevel();
  String smokeStatus = readSmokeStatus();
  
  static unsigned long lastSmokeBuzzerTime = 0;
  unsigned long currentTime = millis();
  
  if (currentTime - lastSmokeBuzzerTime > 2000 && smokeLevel > 600) {
    tone(BUZZER_PIN, 2500, 300);
    delay(100);
    tone(BUZZER_PIN, 2500, 300);
    delay(100);
    tone(BUZZER_PIN, 2500, 300);
    lastSmokeBuzzerTime = currentTime;
  }
  
  u8g2.clearBuffer();
  
  u8g2.drawBox(0, 0, 128, 12);
  u8g2.setColorIndex(0);
  u8g2.setFont(u8g2_font_7x13B_tr);
  u8g2.drawStr(20, 9, "SMOKE SENSOR");
  u8g2.setColorIndex(1);
  
  if (smokeLevel > 600) { // High or Critical
    if ((millis() / 150) % 2) {
      u8g2.drawRFrame(10, 14, 108, 32, 4);
      u8g2.drawRFrame(12, 16, 104, 28, 2);
    }
    
    u8g2.setFont(u8g2_font_ncenB10_tr);
    String smokeText = smokeStatus;
    smokeText.toUpperCase();
    int smokeX = (128 - smokeText.length() * 10) / 2;
    u8g2.drawStr(smokeX, 25, smokeText.c_str());
    
    u8g2.setFont(u8g2_font_6x10_tr);
    String levelText = "Level: " + String(smokeLevel);
    int levelX = (128 - levelText.length() * 6) / 2;
    u8g2.drawStr(levelX, 35, levelText.c_str());
    
    String evacuateText = "EVACUATE!";
    int evacuateX = (128 - evacuateText.length() * 6) / 2;
    u8g2.drawStr(evacuateX, 55, evacuateText.c_str());
    
  } else {
    u8g2.drawRFrame(15, 16, 98, 36, 4);
    
    u8g2.setFont(u8g2_font_6x10_tr);
    String statusText = "Status: " + smokeStatus;
    int statusX = 19 + (90 - statusText.length() * 6) / 2;
    u8g2.drawStr(statusX, 25, statusText.c_str());
    
    u8g2.setFont(u8g2_font_ncenB10_tr);
    String levelText = String(smokeLevel);
    int levelX = 19 + (90 - levelText.length() * 10) / 2;
    u8g2.drawStr(levelX, 38, levelText.c_str());
    
    // Smoke level bar
    u8g2.drawFrame(19, 42, 90, 6);
    int barWidth = map(smokeLevel, 0, 1000, 0, 88);
    barWidth = constrain(barWidth, 0, 88);
    if (barWidth > 0) {
      u8g2.drawBox(20, 43, barWidth, 4);
    }
    
    String clearText = "Air Quality OK";
    int clearX = (128 - clearText.length() * 6) / 2;
    u8g2.setFont(u8g2_font_6x10_tr);
    u8g2.drawStr(clearX, 62, clearText.c_str());
  }
  
  u8g2.sendBuffer();
}

/*************************************************
 *        IoT Mode Dashboard
 *************************************************/
void updateIoTModeScreen() {
  u8g2.clearBuffer();
  
  u8g2.drawBox(0, 0, 128, 12);
  u8g2.setColorIndex(0);
  u8g2.setFont(u8g2_font_7x13B_tr);
  u8g2.drawStr(20, 10, "BIOMEDICAL IoT");
  u8g2.setColorIndex(1);
  
  u8g2.drawRFrame(5, 16, 118, 36, 3);
  
  u8g2.setFont(u8g2_font_6x10_tr);
  u8g2.drawStr(10, 25, "SSID: ");
  u8g2.drawStr(40, 25, AP_SSID);
  
  u8g2.drawStr(10, 33, "Pass: ");
  u8g2.drawStr(40, 33, AP_PASSWORD);
  
  u8g2.drawStr(10, 41, "IP: ");
  IPAddress IP = WiFi.softAPIP();
  u8g2.setCursor(30, 41);
  u8g2.print(IP);
  
  u8g2.drawStr(10, 49, "Connected: ");
  int clients = WiFi.softAPgetStationNum();
  u8g2.setCursor(70, 49);
  u8g2.print(clients);
  u8g2.print(" device");
  if (clients != 1) u8g2.print("s");
  
  if (clients > 0) {
    u8g2.drawDisc(100, 25, 3);
  }
  
  u8g2.setFont(u8g2_font_micro_tr);
  u8g2.drawStr(10, 63, "LEFT: EXIT");
  
  u8g2.sendBuffer();
}
